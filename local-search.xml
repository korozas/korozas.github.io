<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E9%83%9D%E6%96%8C%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/07/16/%E9%83%9D%E6%96%8C%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>title: 郝斌 数据结构笔记<br>date: 2021-07-08 22:18:39<br>tags:<br>comment: ‘valine’</p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p><strong>数据结构定义</strong></p><p>我们如何把现实中大量而复杂的问题以特定的*<strong>数据类型*</strong>和特定的*<strong>存储结构*</strong>保存到主存储器（内存）中，以及在此基础上为实现某个功能（比如查找某个元素，删除某个元素，对元素进行排序等）而执行的相应操作，这个相应的操作也叫算法。</p><blockquote><p>数据结构 = 个体的存储 + 个体的关系存储</p><p>算法 = 对存储数据的操作</p></blockquote></li><li><p><strong>算法定义</strong></p><ul><li>通俗的说算法是解题的方法和步骤</li><li>衡量算法的标准<ol><li>时间复杂度：程序大概要执行的次数，而非执行的时间。</li><li>空间复杂度：程序执行过程中大概所占用的最大内存空间。</li><li>难易程度：用易懂，避免过于复杂。</li><li>健壮性</li></ol></li></ul></li><li><p><strong>数据结构的地位</strong></p><p>数据结构是软件中最核心的课程</p><p>程序=数据的存储+数据的操作+可以被计算机执行的语言</p></li></ul><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><ol><li><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><ul><li>指针的重要性：指针是C语言的灵魂</li><li>定义：<ul><li>地址：内存单元的编号，从0开始的非负整数</li><li>指针：指针就是地址，地址就是指针；指针变量是存放内存单元地址的变量；指针的本质是一个操作受限的非负整数。</li></ul></li><li>分类：基本类型的指针；指针和数组的关系</li></ul></li><li><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><ul><li><p>为什么会出现结构体：为了表示一些复杂的数据，而普通的基本类型变量无法满足要求；</p></li><li><p>定义：<strong>结构体是用户根据实际需要自己定义的复合数类型</strong>；</p></li><li><p>如何使用结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs c"><span class="hljs-comment">//定义结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> sid;<br>    <span class="hljs-keyword">char</span> name[<span class="hljs-number">200</span>];<br>    <span class="hljs-keyword"><code class="language-hljs c"><span class="hljs-comment">//定义结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> sid;<br>    <span class="hljs-keyword">char</span> name[<span class="hljs-number">200</span>];<br>    <span class="hljs-keyword">int</span> age;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>```c<br>//整体赋值，类似于Java中new类的构造函数 <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs stata"><br>```c<br>struct Student <span class="hljs-keyword">st</span> = &#123;1001,<span class="hljs-string">&quot;zhangsan&quot;</span>,18&#125;；<br><span class="hljs-comment">//单个赋值</span><br><span class="hljs-keyword">st</span>.id=1001；<br>strcpy(<span class="hljs-keyword">st</span>.name,<span class="hljs-string">&quot;zhangsan&quot;</span>)；<br><span class="hljs-keyword"><code class="language-hljs stata"><br>```c<br>struct Student <span class="hljs-keyword">st</span> = &#123;1001,<span class="hljs-string">&quot;zhangsan&quot;</span>,18&#125;；<br><span class="hljs-comment">//单个赋值</span><br><span class="hljs-keyword">st</span>.id=1001；<br>strcpy(<span class="hljs-keyword">st</span>.name,<span class="hljs-string">&quot;zhangsan&quot;</span>)；<br><span class="hljs-keyword">st</span>.age=18； <br></code></pre></td></tr></table></figure></li><li><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//通常使用指针的方式赋值</span><span class="token operator">&lt;</span>figure class<span class="token operator">=</span><span class="token string">"highlight xl"</span><span class="token operator">></span><span class="token operator">&lt;</span>table<span class="token operator">></span><span class="token operator">&lt;</span>tr<span class="token operator">></span><span class="token operator">&lt;</span>td class<span class="token operator">=</span><span class="token string">"gutter"</span><span class="token operator">></span><span class="token operator">&lt;</span>pre<span class="token operator">></span><span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">6</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">7</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span>td class<span class="token operator">=</span><span class="token string">"code"</span><span class="token operator">></span><span class="token operator">&lt;</span>pre<span class="token operator">></span><span class="token operator">&lt;</span>code class<span class="token operator">=</span><span class="token string">"hljs xl"</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>```c<span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token keyword">struct</span> Student <span class="token operator">*</span>pst；<span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span class<span class="token operator">=</span><span class="token string">"hljs-comment"</span><span class="token operator">></span><span class="token comment" spellcheck="true">//pst所指向的结构体变量中的sid这个成员&lt;/span>&lt;br>&lt;span class="hljs-function">&lt;span class="hljs-title">pst&lt;/span>->&lt;/span>sid=&lt;span class="hljs-number">1001&lt;/span>；&lt;br>&lt;span class="hljs-function">&lt;span class="hljs-title">strcpy&lt;/span>(pst->&lt;/span>&lt;span class="hljs-keyword">name&lt;/span>,&lt;span class="hljs-string">"lisi"&lt;/span>)；&lt;br>&lt;span class="hljs-function">&lt;span class="hljs-title">pst&lt;/span>->&lt;/span>age=&lt;span class="hljs-number">19&lt;/span>；&lt;br></span></code></pre></td></tr></table></figure>  </code></pre></li></ul></li><li><p>注意事项：结构体变量不能算术计算，但是可以赋值；普通结构体变量和结构体指针变量作为函数传参的问题，推荐使用传递结构体指针的方式，这样效率高节约内存。</p></li></ul></li><li><h4 id="动态内存的分配和释放"><a href="#动态内存的分配和释放" class="headerlink" title="动态内存的分配和释放"></a>动态内存的分配和释放</h4></li></ol><blockquote><p>　样例代码：　　　　</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre class=" language-hljs c"> <span class="hljs-number">1</span>  <span class="hljs-number">1</span> 一维数组:<br> <span class="hljs-number">2</span>  <span class="hljs-number">2</span> <br> <span class="hljs-number">3</span>  <span class="hljs-number">3</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-number">4</span>  <span class="hljs-number">4</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br> <span class="hljs-number">5</span>  <span class="hljs-number">5</span> <br> <span class="hljs-number">6</span>  <span class="hljs-number">6</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 7  7 </span>&#123;<br> <span class="hljs-number">8</span>  <span class="hljs-number">8</span>  <span class="hljs-comment">//静态分配数组</span><br> <span class="hljs-number">9</span>  <span class="hljs-number">9</span>  <span class="hljs-keyword">int</span> a[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>&#125;;<br><span class="hljs-number">10</span> <span class="hljs-number">10</span>  <span class="hljs-comment">//len为一维数组的长度，可以根据需求动态分配长度</span><br><span class="hljs-number">11</span> <span class="hljs-number">11</span>  <span class="hljs-keyword">int</span> len;<br><span class="hljs-number">12</span> <span class="hljs-number">12</span>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入你需要分配的数组长度：len=&quot;</span>);<br><span class="hljs-number">13</span> <span class="hljs-number">13</span>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;len);<span class="hljs-comment">//len=5</span><br><span class="hljs-number">14</span> <span class="hljs-number">14</span>  <span class="hljs-comment">//malloc为分配内存的函数，返回第一个字节的地址，但是默认返回是一个干地址，没有实际意义，必须加强制类型转换为指定的指针类型才有意义，（int *）表示强转为int类型的指针，那么返回的地址指向的就是第一个元素的地址，那么第二个元素的地址就是第一个地址向后挪一位</span><br><span class="hljs-number">15</span> <span class="hljs-number">15</span>  <span class="hljs-keyword">int</span> * pArr = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) * len);<br><span class="hljs-number">16</span> <span class="hljs-number">16</span>  *pArr = <span class="hljs-number">2</span>;<span class="hljs-comment">//类似于 a[0]=4,因为数组名就是指向了第一个元素的地址，跟*pArr一样</span><br><span class="hljs-number">17</span> <span class="hljs-number">17</span>  pArr[<span class="hljs-number">1</span>] = <span class="hljs-number">3</span>; <span class="hljs-comment">//类似于 a[1]=3</span><br><span class="hljs-number">18</span> <span class="hljs-number">18</span>  <br><span class="hljs-number">19</span> <span class="hljs-number">19</span>  <span class="hljs-built_in">free</span>(pArr);<span class="hljs-comment">//把pArr所代表的动态分配的20个字节的内存释放</span><br><span class="hljs-number">20</span> <span class="hljs-number">20</span>  <br><span class="hljs-number">21</span> <span class="hljs-number">21</span>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">22</span> <span class="hljs-number"><code class="language-hljs c"> <span class="hljs-number">1</span>  <span class="hljs-number">1</span> 一维数组:<br> <span class="hljs-number">2</span>  <span class="hljs-number">2</span> <br> <span class="hljs-number">3</span>  <span class="hljs-number">3</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-number">4</span>  <span class="hljs-number">4</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br> <span class="hljs-number">5</span>  <span class="hljs-number">5</span> <br> <span class="hljs-number">6</span>  <span class="hljs-number">6</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 7  7 </span>&#123;<br> <span class="hljs-number">8</span>  <span class="hljs-number">8</span>  <span class="hljs-comment">//静态分配数组</span><br> <span class="hljs-number">9</span>  <span class="hljs-number">9</span>  <span class="hljs-keyword">int</span> a[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>&#125;;<br><span class="hljs-number">10</span> <span class="hljs-number">10</span>  <span class="hljs-comment">//len为一维数组的长度，可以根据需求动态分配长度</span><br><span class="hljs-number">11</span> <span class="hljs-number">11</span>  <span class="hljs-keyword">int</span> len;<br><span class="hljs-number">12</span> <span class="hljs-number">12</span>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入你需要分配的数组长度：len=&quot;</span>);<br><span class="hljs-number">13</span> <span class="hljs-number">13</span>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;len);<span class="hljs-comment">//len=5</span><br><span class="hljs-number">14</span> <span class="hljs-number">14</span>  <span class="hljs-comment">//malloc为分配内存的函数，返回第一个字节的地址，但是默认返回是一个干地址，没有实际意义，必须加强制类型转换为指定的指针类型才有意义，（int *）表示强转为int类型的指针，那么返回的地址指向的就是第一个元素的地址，那么第二个元素的地址就是第一个地址向后挪一位</span><br><span class="hljs-number">15</span> <span class="hljs-number">15</span>  <span class="hljs-keyword">int</span> * pArr = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) * len);<br><span class="hljs-number">16</span> <span class="hljs-number">16</span>  *pArr = <span class="hljs-number">2</span>;<span class="hljs-comment">//类似于 a[0]=4,因为数组名就是指向了第一个元素的地址，跟*pArr一样</span><br><span class="hljs-number">17</span> <span class="hljs-number">17</span>  pArr[<span class="hljs-number">1</span>] = <span class="hljs-number">3</span>; <span class="hljs-comment">//类似于 a[1]=3</span><br><span class="hljs-number">18</span> <span class="hljs-number">18</span>  <br><span class="hljs-number">19</span> <span class="hljs-number">19</span>  <span class="hljs-built_in">free</span>(pArr);<span class="hljs-comment">//把pArr所代表的动态分配的20个字节的内存释放</span><br><span class="hljs-number">20</span> <span class="hljs-number">20</span>  <br><span class="hljs-number">21</span> <span class="hljs-number">21</span>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">22</span> <span class="hljs-number">22</span> &#125;<br></code></pre></td></tr></table></figure></blockquote><ol><li><h4 id="跨函数使用内存"><a href="#跨函数使用内存" class="headerlink" title="跨函数使用内存"></a>跨函数使用内存</h4><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre class=" language-hljs c"> <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-number">2</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br> <span class="hljs-number">3</span> <br> <span class="hljs-number">4</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span></span><br><span class="hljs-class"> 5 &#123;</span><br> <span class="hljs-number">6</span>  <span class="hljs-keyword">int</span> sid;<br> <span class="hljs-number">7</span>  <span class="hljs-keyword">int</span> age;<br> <span class="hljs-number">8</span> &#125;；<br> <span class="hljs-number">9</span> <br><span class="hljs-number">10</span> <span class="hljs-function">struct Student * <span class="hljs-title">CreateStudent</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-number">11</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShowStudent</span><span class="hljs-params">(struct Student *)</span></span>;<br><span class="hljs-number">12</span> <br><span class="hljs-number">13</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function">14 </span>&#123;<br><span class="hljs-number">15</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> * <span class="hljs-title">ps</span>;</span><br><span class="hljs-number">16</span>     ps = CreateStudent();<br><span class="hljs-number">17</span>  ShowStudent(ps);<br><span class="hljs-number">18</span>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">19</span> &#125;<br><span class="hljs-number">20</span> <br><span class="hljs-number">21</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShowStudent</span><span class="hljs-params">(struct Student * pst)</span></span><br><span class="hljs-function">22 </span>&#123;<br><span class="hljs-number">23</span>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,pst-&gt;sid,pst-&gt;age);<br><span class="hljs-number">24</span> &#125;<br><span class="hljs-number">25</span> <br><span class="hljs-number">26</span> <span class="hljs-function">struct Student * <span class="hljs-title">CreateStudent</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function">27 </span>&#123;<br><span class="hljs-number">28</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> * <span class="hljs-title">p</span> =</span> (struct Student *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct Student))；<br><span class="hljs-number">29</span>  p-&gt;sid = <span class="hljs-number">1001</span>;<br><span class="hljs-number">30</span>  p-&gt;age = <span class="hljs-number">18</span>;<br><span class="hljs-number">31</span>  <span class="hljs-keyword">return</span> p;<br><span class="hljs-number"><code class="language-hljs c"> <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-number">2</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br> <span class="hljs-number">3</span> <br> <span class="hljs-number">4</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span></span><br><span class="hljs-class"> 5 &#123;</span><br> <span class="hljs-number">6</span>  <span class="hljs-keyword">int</span> sid;<br> <span class="hljs-number">7</span>  <span class="hljs-keyword">int</span> age;<br> <span class="hljs-number">8</span> &#125;；<br> <span class="hljs-number">9</span> <br><span class="hljs-number">10</span> <span class="hljs-function">struct Student * <span class="hljs-title">CreateStudent</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><span class="hljs-number">11</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShowStudent</span><span class="hljs-params">(struct Student *)</span></span>;<br><span class="hljs-number">12</span> <br><span class="hljs-number">13</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function">14 </span>&#123;<br><span class="hljs-number">15</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> * <span class="hljs-title">ps</span>;</span><br><span class="hljs-number">16</span>     ps = CreateStudent();<br><span class="hljs-number">17</span>  ShowStudent(ps);<br><span class="hljs-number">18</span>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">19</span> &#125;<br><span class="hljs-number">20</span> <br><span class="hljs-number">21</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShowStudent</span><span class="hljs-params">(struct Student * pst)</span></span><br><span class="hljs-function">22 </span>&#123;<br><span class="hljs-number">23</span>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,pst-&gt;sid,pst-&gt;age);<br><span class="hljs-number">24</span> &#125;<br><span class="hljs-number">25</span> <br><span class="hljs-number">26</span> <span class="hljs-function">struct Student * <span class="hljs-title">CreateStudent</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function">27 </span>&#123;<br><span class="hljs-number">28</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> * <span class="hljs-title">p</span> =</span> (struct Student *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct Student))；<br><span class="hljs-number">29</span>  p-&gt;sid = <span class="hljs-number">1001</span>;<br><span class="hljs-number">30</span>  p-&gt;age = <span class="hljs-number">18</span>;<br><span class="hljs-number">31</span>  <span class="hljs-keyword">return</span> p;<br><span class="hljs-number">32</span> &#125;<br></code></pre></td></tr></table></figure></blockquote></li><li><p>typedef函数的使用</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class=" language-hljs c"> <span class="hljs-number">1</span> <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> INT; <span class="hljs-comment">// 相当于给int起了一个别名 INT</span><br> <span class="hljs-number">2</span> <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span></span><br><span class="hljs-class"> 3 &#123;</span><br> <span class="hljs-number">4</span>  <span class="hljs-keyword">int</span> sid;<br> <span class="hljs-number">5</span>  <span class="hljs-keyword">char</span> name[<span class="hljs-number">100</span>];<br> <span class="hljs-number">6</span>  <span class="hljs-keyword">char</span> sex;<br> <span class="hljs-number">7</span> &#125; ST; <span class="hljs-comment">//ST st 就相当于 struct Student st,给struct Student 起了别名ST，这样简洁了代码</span><br> <span class="hljs-number">8</span> <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span></span><br><span class="hljs-class"> 9 &#123;</span><br><span class="hljs-number">10</span>  <span class="hljs-keyword">int</span> sid;<br><span class="hljs-number">11</span>  <span class="hljs-keyword">char</span> name[<span class="hljs-number">100</span>];<br><span class="hljs-number">12</span>  <span class="hljs-keyword">char</span> sex;<br><span class="hljs-number">13</span> &#125; * ST; <span class="hljs-comment"><code class="language-hljs c"> <span class="hljs-number">1</span> <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> INT; <span class="hljs-comment">// 相当于给int起了一个别名 INT</span><br> <span class="hljs-number">2</span> <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span></span><br><span class="hljs-class"> 3 &#123;</span><br> <span class="hljs-number">4</span>  <span class="hljs-keyword">int</span> sid;<br> <span class="hljs-number">5</span>  <span class="hljs-keyword">char</span> name[<span class="hljs-number">100</span>];<br> <span class="hljs-number">6</span>  <span class="hljs-keyword">char</span> sex;<br> <span class="hljs-number">7</span> &#125; ST; <span class="hljs-comment">//ST st 就相当于 struct Student st,给struct Student 起了别名ST，这样简洁了代码</span><br> <span class="hljs-number">8</span> <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span></span><br><span class="hljs-class"> 9 &#123;</span><br><span class="hljs-number">10</span>  <span class="hljs-keyword">int</span> sid;<br><span class="hljs-number">11</span>  <span class="hljs-keyword">char</span> name[<span class="hljs-number">100</span>];<br><span class="hljs-number">12</span>  <span class="hljs-keyword">char</span> sex;<br><span class="hljs-number">13</span> &#125; * ST; <span class="hljs-comment">//ST就相当于struct Student *  </span><br></code></pre></td></tr></table></figure></blockquote></li></ol><h2 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h2><blockquote><p>把所有节点用一条直线串起来</p></blockquote><ul><li><h4 id="连续存储【数组】"><a href="#连续存储【数组】" class="headerlink" title="连续存储【数组】"></a>连续存储【数组】</h4><ol><li><p>什么叫数组：元素类型相同，大小相等</p></li><li><p>数组的优缺点</p><ul><li>优点：存取速度很快</li><li>缺点：插入删除元素很慢</li></ul><blockquote><p>数组例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre class=" language-hljs c">  <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br>  <span class="hljs-number">2</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br>  <span class="hljs-number">3</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br>  <span class="hljs-number">4</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdbool.sh&gt;</span></span><br>  <span class="hljs-number">5</span> <br>  <span class="hljs-number">6</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Arr</span></span><br><span class="hljs-class">  7 &#123;</span><br>  <span class="hljs-number">8</span>     <span class="hljs-keyword">int</span> * pBase;<span class="hljs-comment">//数组首地址</span><br>  <span class="hljs-number">9</span>     <span class="hljs-keyword">int</span> cnt;<span class="hljs-comment">//当前数组内已有元素长度</span><br> <span class="hljs-number">10</span>     <span class="hljs-keyword">int</span> len;<span class="hljs-comment">//数组长度</span><br> <span class="hljs-number">11</span> &#125;;<br> <span class="hljs-number">12</span> <br> <span class="hljs-number">13</span> <span class="hljs-comment">//初始化数组</span><br> <span class="hljs-number">14</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init_arr</span><span class="hljs-params">(struct Arr * pArr,<span class="hljs-keyword">int</span> length)</span></span>;<br> <span class="hljs-number">15</span> <span class="hljs-comment">//获取某个位置上的元素</span><br> <span class="hljs-number">16</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos)</span></span>;<br> <span class="hljs-number">17</span> <span class="hljs-comment">//判断数组是否已经满了</span><br> <span class="hljs-number">18</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_full</span><span class="hljs-params">(struct Arr * pArr)</span></span>;<br> <span class="hljs-number">19</span> <span class="hljs-comment">//判断数组是否为空</span><br> <span class="hljs-number">20</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(struct Arr * pArr)</span></span>;<br> <span class="hljs-number">21</span> <span class="hljs-comment">//打印数组内所有元素</span><br> <span class="hljs-number">22</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show_arr</span><span class="hljs-params">(struct Arr * pArr)</span></span>;<br> <span class="hljs-number">23</span> <span class="hljs-comment">//向数组中追加元素</span><br> <span class="hljs-number">24</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">append_arr</span><span class="hljs-params">(struct Arr * pArr,<span class="hljs-keyword">int</span> val)</span></span>;<br> <span class="hljs-number">25</span> <span class="hljs-comment">//向数组某个位置插入元素</span><br> <span class="hljs-number">26</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert_arr</span><span class="hljs-params">(struct Arr * pArr,<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> val)</span></span>;<br> <span class="hljs-number">27</span> <span class="hljs-comment">//排序</span><br> <span class="hljs-number">28</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort_arr</span> <span class="hljs-params">(struct Arr * pArr)</span></span>;<br> <span class="hljs-number">29</span> <br> <span class="hljs-number">30</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 31 </span>&#123;<br> <span class="hljs-number">32</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Arr</span> <span class="hljs-title">arr</span>;</span><br> <span class="hljs-number">33</span>     init_arr(&amp;arr,<span class="hljs-number">6</span>);<br> <span class="hljs-number">34</span>     <br> <span class="hljs-number">35</span>     <br> <span class="hljs-number">36</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> <span class="hljs-number">37</span> &#125;<br> <span class="hljs-number">38</span> <br> <span class="hljs-number">39</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init_arr</span><span class="hljs-params">(struct Arr * pArr,<span class="hljs-keyword">int</span> length)</span></span><br><span class="hljs-function"> 40 </span>&#123;<br> <span class="hljs-number">41</span>     pArr-&gt;pBase = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct Arr) * length);<br> <span class="hljs-number">42</span>     <span class="hljs-keyword">if</span> ( <span class="hljs-literal">NULL</span> == pArr-&gt;pBase)<br> <span class="hljs-number">43</span>     &#123;<br> <span class="hljs-number">44</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;动态内存分配失败\n&quot;</span>);<br> <span class="hljs-number">45</span>         <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br> <span class="hljs-number">46</span>     &#125;<br> <span class="hljs-number">47</span>     <span class="hljs-keyword">else</span> <br> <span class="hljs-number">48</span>     &#123;<br> <span class="hljs-number">49</span>         pArr-&gt;len = length;<br> <span class="hljs-number">50</span>         pArr-&gt;cnt = <span class="hljs-number">0</span>;<br> <span class="hljs-number">51</span>     &#125;<br> <span class="hljs-number">52</span>     <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">53</span> &#125;<br> <span class="hljs-number">54</span> <br> <span class="hljs-number">55</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(struct Arr *pArr)</span></span><br><span class="hljs-function"> 56 </span>&#123;<br> <span class="hljs-number">57</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> == pArr-&gt;cnt ? <span class="hljs-literal">true</span>:<span class="hljs-literal">false</span>;<br> <span class="hljs-number">58</span> &#125;<br> <span class="hljs-number">59</span> <br> <span class="hljs-number">60</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_full</span><span class="hljs-params">(struct Arr * pArr)</span></span><br><span class="hljs-function"> 61 </span>&#123;<br> <span class="hljs-number">62</span>     <span class="hljs-keyword">return</span> pArr-&gt;cnt == pArr-&gt;len ? <span class="hljs-literal">true</span>:<span class="hljs-literal">false</span>;<br> <span class="hljs-number">63</span> &#125;<br> <span class="hljs-number">64</span> <br> <span class="hljs-number">65</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show_arr</span><span class="hljs-params">(struct Arr * pArr)</span></span><br><span class="hljs-function"> 66 </span>&#123;<br> <span class="hljs-number">67</span>     <span class="hljs-keyword">int</span> i;<br> <span class="hljs-number">68</span>     <span class="hljs-keyword">if</span> ( is_empty(pArr) )<br> <span class="hljs-number">69</span>     &#123;<br> <span class="hljs-number">70</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;数组为空&quot;</span>);<br> <span class="hljs-number">71</span>     &#125;<br> <span class="hljs-number">72</span>     <span class="hljs-keyword">else</span> <br> <span class="hljs-number">73</span>     &#123;<br> <span class="hljs-number">74</span>         <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>;i&lt;pArr-&gt;cnt;i++)<br> <span class="hljs-number">75</span>         &#123;<br> <span class="hljs-number">76</span>             <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,pArr-&gt;pBase[i]);<br> <span class="hljs-number">77</span>         &#125;<br> <span class="hljs-number">78</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br> <span class="hljs-number">79</span>     &#125;<br> <span class="hljs-number">80</span>     <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">81</span> &#125;<br> <span class="hljs-number">82</span> <br> <span class="hljs-number">83</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">append_arr</span><span class="hljs-params">(struct Arr * pArr,<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"> 84 </span>&#123;<br> <span class="hljs-number">85</span>     <span class="hljs-keyword">if</span>( is_full(pArr) )<br> <span class="hljs-number">86</span>     &#123;<br> <span class="hljs-number">87</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;数组已满，不能再追加！\n&quot;</span>);<br> <span class="hljs-number">88</span>     &#125;<br> <span class="hljs-number">89</span>     <span class="hljs-keyword">else</span> <br> <span class="hljs-number">90</span>     &#123;<br> <span class="hljs-number">91</span>         pArr-&gt;pBase[pArr-&gt;cnt]=val;<br> <span class="hljs-number">92</span>         ++ pArr-&gt;cnt;<br> <span class="hljs-number">93</span>     &#125;<br> <span class="hljs-number">94</span>     <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">95</span> &#125;<br> <span class="hljs-number">96</span> <br> <span class="hljs-number">97</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert_arr</span><span class="hljs-params">(struct Arr * pArr,<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"> 98 </span>&#123;<br> <span class="hljs-number">99</span>     <span class="hljs-keyword">if</span> ( is_full(pArr) )<br><span class="hljs-number">100</span>     &#123;<br><span class="hljs-number">101</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;数组已满，无法插入！\n&quot;</span>);<br><span class="hljs-number">102</span>         <span class="hljs-keyword">return</span>;<br><span class="hljs-number">103</span>     &#125;<br><span class="hljs-number">104</span>     <span class="hljs-keyword">if</span> ( pos &lt; <span class="hljs-number">1</span> || pos &gt; pArr-&gt;cnt)<br><span class="hljs-number">105</span>     &#123;<br><span class="hljs-number">106</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;指定位置有误，无法插入！\n&quot;</span>);<br><span class="hljs-number">107</span>         <span class="hljs-keyword">return</span>;<br><span class="hljs-number">108</span>     &#125;<br><span class="hljs-number">109</span>     <br><span class="hljs-number">110</span>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=pArr-&gt;cnt; i&lt;pos<span class="hljs-number">-1</span>; --i)<br><span class="hljs-number">111</span>     &#123;<br><span class="hljs-number">112</span>         pArr-&gt;pBase[i+<span class="hljs-number">1</span>]=pArr-&gt;pBase[i];<br><span class="hljs-number">113</span>     &#125;<br><span class="hljs-number">114</span>     pArr-&gt;pBase[pos<span class="hljs-number">-1</span>]=val;<br><span class="hljs-number">115</span>     pArr-&gt;cnt ++;<br><span class="hljs-number">116</span>     <span class="hljs-keyword">return</span>;<br><span class="hljs-number">117</span> &#125;<br><span class="hljs-number">118</span> <br><span class="hljs-number">119</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inversion_arr</span> <span class="hljs-params">(struct Arr * pArr)</span></span><br><span class="hljs-function">120 </span>&#123;<br><span class="hljs-number">121</span> <span class="hljs-keyword">int</span> i;<br><span class="hljs-number">122</span> <span class="hljs-keyword">int</span> j = pArr-&gt; cnt <span class="hljs-number">-1</span>;<br><span class="hljs-number">123</span> <span class="hljs-keyword">int</span> t;<br><span class="hljs-number">124</span> <br><span class="hljs-number">125</span> <span class="hljs-keyword">while</span> (i &lt; j) <br><span class="hljs-number">126</span>     &#123;<br><span class="hljs-number">127</span> t = pArr-&gt;pBase[i];<br><span class="hljs-number">128</span> pArr-&gt;pBase[i] = pArr-&gt;pBase[j];<br><span class="hljs-number">129</span> pArr-&gt;pBase[j] = t;<br><span class="hljs-number">130</span> ++i;<br><span class="hljs-number">131</span> --j;<br><span class="hljs-number">132</span>     &#125;<br><span class="hljs-number">133</span> <span class="hljs-keyword">return</span>;<br><span class="hljs-number">134</span> &#125;<br><span class="hljs-number">135</span> <br><span class="hljs-number">136</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort_arr</span> <span class="hljs-params">(struct Arr * pArr)</span></span><br><span class="hljs-function">137 </span>&#123;<br><span class="hljs-number">138</span> <span class="hljs-keyword">int</span> i,j,t;<br><span class="hljs-number">139</span> <br><span class="hljs-number">140</span> <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;pArr-&gt;cnt<span class="hljs-number">-1</span>; ++i)<br><span class="hljs-number">141</span>     &#123;<br><span class="hljs-number">142</span> <span class="hljs-keyword">for</span> (j=i+<span class="hljs-number">1</span>; j&lt;pArr-&gt;cnt; ++j)<br><span class="hljs-number">143</span>     &#123;<br><span class="hljs-number">144</span> <span class="hljs-keyword">if</span> (pArr-&gt;pBase[i]&gt;pArr-&gt;pBase[j])<br><span class="hljs-number">145</span>     &#123;<br><span class="hljs-number">146</span> t = pArr-&gt;pBase[j];<br><span class="hljs-number">147</span> pArr-&gt;pBase[j]=pArr-&gt;pBase[i];<br><span class="hljs-number">148</span> pArr-&gt;pBase[i]=t;<br><span class="hljs-number">149</span>     &#125;<br><span class="hljs-number">150</span>     &#125;<br><span class="hljs-number">151</span>     &#125;<br><span class="hljs-number">152</span> <span class="hljs-keyword">return</span>;<br><span class="hljs-number"><code class="language-hljs c">  <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br>  <span class="hljs-number">2</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br>  <span class="hljs-number">3</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br>  <span class="hljs-number">4</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdbool.sh&gt;</span></span><br>  <span class="hljs-number">5</span> <br>  <span class="hljs-number">6</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Arr</span></span><br><span class="hljs-class">  7 &#123;</span><br>  <span class="hljs-number">8</span>     <span class="hljs-keyword">int</span> * pBase;<span class="hljs-comment">//数组首地址</span><br>  <span class="hljs-number">9</span>     <span class="hljs-keyword">int</span> cnt;<span class="hljs-comment">//当前数组内已有元素长度</span><br> <span class="hljs-number">10</span>     <span class="hljs-keyword">int</span> len;<span class="hljs-comment">//数组长度</span><br> <span class="hljs-number">11</span> &#125;;<br> <span class="hljs-number">12</span> <br> <span class="hljs-number">13</span> <span class="hljs-comment">//初始化数组</span><br> <span class="hljs-number">14</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init_arr</span><span class="hljs-params">(struct Arr * pArr,<span class="hljs-keyword">int</span> length)</span></span>;<br> <span class="hljs-number">15</span> <span class="hljs-comment">//获取某个位置上的元素</span><br> <span class="hljs-number">16</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pos)</span></span>;<br> <span class="hljs-number">17</span> <span class="hljs-comment">//判断数组是否已经满了</span><br> <span class="hljs-number">18</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_full</span><span class="hljs-params">(struct Arr * pArr)</span></span>;<br> <span class="hljs-number">19</span> <span class="hljs-comment">//判断数组是否为空</span><br> <span class="hljs-number">20</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(struct Arr * pArr)</span></span>;<br> <span class="hljs-number">21</span> <span class="hljs-comment">//打印数组内所有元素</span><br> <span class="hljs-number">22</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show_arr</span><span class="hljs-params">(struct Arr * pArr)</span></span>;<br> <span class="hljs-number">23</span> <span class="hljs-comment">//向数组中追加元素</span><br> <span class="hljs-number">24</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">append_arr</span><span class="hljs-params">(struct Arr * pArr,<span class="hljs-keyword">int</span> val)</span></span>;<br> <span class="hljs-number">25</span> <span class="hljs-comment">//向数组某个位置插入元素</span><br> <span class="hljs-number">26</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert_arr</span><span class="hljs-params">(struct Arr * pArr,<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> val)</span></span>;<br> <span class="hljs-number">27</span> <span class="hljs-comment">//排序</span><br> <span class="hljs-number">28</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort_arr</span> <span class="hljs-params">(struct Arr * pArr)</span></span>;<br> <span class="hljs-number">29</span> <br> <span class="hljs-number">30</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 31 </span>&#123;<br> <span class="hljs-number">32</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Arr</span> <span class="hljs-title">arr</span>;</span><br> <span class="hljs-number">33</span>     init_arr(&amp;arr,<span class="hljs-number">6</span>);<br> <span class="hljs-number">34</span>     <br> <span class="hljs-number">35</span>     <br> <span class="hljs-number">36</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> <span class="hljs-number">37</span> &#125;<br> <span class="hljs-number">38</span> <br> <span class="hljs-number">39</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init_arr</span><span class="hljs-params">(struct Arr * pArr,<span class="hljs-keyword">int</span> length)</span></span><br><span class="hljs-function"> 40 </span>&#123;<br> <span class="hljs-number">41</span>     pArr-&gt;pBase = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct Arr) * length);<br> <span class="hljs-number">42</span>     <span class="hljs-keyword">if</span> ( <span class="hljs-literal">NULL</span> == pArr-&gt;pBase)<br> <span class="hljs-number">43</span>     &#123;<br> <span class="hljs-number">44</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;动态内存分配失败\n&quot;</span>);<br> <span class="hljs-number">45</span>         <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br> <span class="hljs-number">46</span>     &#125;<br> <span class="hljs-number">47</span>     <span class="hljs-keyword">else</span> <br> <span class="hljs-number">48</span>     &#123;<br> <span class="hljs-number">49</span>         pArr-&gt;len = length;<br> <span class="hljs-number">50</span>         pArr-&gt;cnt = <span class="hljs-number">0</span>;<br> <span class="hljs-number">51</span>     &#125;<br> <span class="hljs-number">52</span>     <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">53</span> &#125;<br> <span class="hljs-number">54</span> <br> <span class="hljs-number">55</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(struct Arr *pArr)</span></span><br><span class="hljs-function"> 56 </span>&#123;<br> <span class="hljs-number">57</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> == pArr-&gt;cnt ? <span class="hljs-literal">true</span>:<span class="hljs-literal">false</span>;<br> <span class="hljs-number">58</span> &#125;<br> <span class="hljs-number">59</span> <br> <span class="hljs-number">60</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_full</span><span class="hljs-params">(struct Arr * pArr)</span></span><br><span class="hljs-function"> 61 </span>&#123;<br> <span class="hljs-number">62</span>     <span class="hljs-keyword">return</span> pArr-&gt;cnt == pArr-&gt;len ? <span class="hljs-literal">true</span>:<span class="hljs-literal">false</span>;<br> <span class="hljs-number">63</span> &#125;<br> <span class="hljs-number">64</span> <br> <span class="hljs-number">65</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show_arr</span><span class="hljs-params">(struct Arr * pArr)</span></span><br><span class="hljs-function"> 66 </span>&#123;<br> <span class="hljs-number">67</span>     <span class="hljs-keyword">int</span> i;<br> <span class="hljs-number">68</span>     <span class="hljs-keyword">if</span> ( is_empty(pArr) )<br> <span class="hljs-number">69</span>     &#123;<br> <span class="hljs-number">70</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;数组为空&quot;</span>);<br> <span class="hljs-number">71</span>     &#125;<br> <span class="hljs-number">72</span>     <span class="hljs-keyword">else</span> <br> <span class="hljs-number">73</span>     &#123;<br> <span class="hljs-number">74</span>         <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>;i&lt;pArr-&gt;cnt;i++)<br> <span class="hljs-number">75</span>         &#123;<br> <span class="hljs-number">76</span>             <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,pArr-&gt;pBase[i]);<br> <span class="hljs-number">77</span>         &#125;<br> <span class="hljs-number">78</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br> <span class="hljs-number">79</span>     &#125;<br> <span class="hljs-number">80</span>     <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">81</span> &#125;<br> <span class="hljs-number">82</span> <br> <span class="hljs-number">83</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">append_arr</span><span class="hljs-params">(struct Arr * pArr,<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"> 84 </span>&#123;<br> <span class="hljs-number">85</span>     <span class="hljs-keyword">if</span>( is_full(pArr) )<br> <span class="hljs-number">86</span>     &#123;<br> <span class="hljs-number">87</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;数组已满，不能再追加！\n&quot;</span>);<br> <span class="hljs-number">88</span>     &#125;<br> <span class="hljs-number">89</span>     <span class="hljs-keyword">else</span> <br> <span class="hljs-number">90</span>     &#123;<br> <span class="hljs-number">91</span>         pArr-&gt;pBase[pArr-&gt;cnt]=val;<br> <span class="hljs-number">92</span>         ++ pArr-&gt;cnt;<br> <span class="hljs-number">93</span>     &#125;<br> <span class="hljs-number">94</span>     <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">95</span> &#125;<br> <span class="hljs-number">96</span> <br> <span class="hljs-number">97</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert_arr</span><span class="hljs-params">(struct Arr * pArr,<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"> 98 </span>&#123;<br> <span class="hljs-number">99</span>     <span class="hljs-keyword">if</span> ( is_full(pArr) )<br><span class="hljs-number">100</span>     &#123;<br><span class="hljs-number">101</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;数组已满，无法插入！\n&quot;</span>);<br><span class="hljs-number">102</span>         <span class="hljs-keyword">return</span>;<br><span class="hljs-number">103</span>     &#125;<br><span class="hljs-number">104</span>     <span class="hljs-keyword">if</span> ( pos &lt; <span class="hljs-number">1</span> || pos &gt; pArr-&gt;cnt)<br><span class="hljs-number">105</span>     &#123;<br><span class="hljs-number">106</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;指定位置有误，无法插入！\n&quot;</span>);<br><span class="hljs-number">107</span>         <span class="hljs-keyword">return</span>;<br><span class="hljs-number">108</span>     &#125;<br><span class="hljs-number">109</span>     <br><span class="hljs-number">110</span>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=pArr-&gt;cnt; i&lt;pos<span class="hljs-number">-1</span>; --i)<br><span class="hljs-number">111</span>     &#123;<br><span class="hljs-number">112</span>         pArr-&gt;pBase[i+<span class="hljs-number">1</span>]=pArr-&gt;pBase[i];<br><span class="hljs-number">113</span>     &#125;<br><span class="hljs-number">114</span>     pArr-&gt;pBase[pos<span class="hljs-number">-1</span>]=val;<br><span class="hljs-number">115</span>     pArr-&gt;cnt ++;<br><span class="hljs-number">116</span>     <span class="hljs-keyword">return</span>;<br><span class="hljs-number">117</span> &#125;<br><span class="hljs-number">118</span> <br><span class="hljs-number">119</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inversion_arr</span> <span class="hljs-params">(struct Arr * pArr)</span></span><br><span class="hljs-function">120 </span>&#123;<br><span class="hljs-number">121</span> <span class="hljs-keyword">int</span> i;<br><span class="hljs-number">122</span> <span class="hljs-keyword">int</span> j = pArr-&gt; cnt <span class="hljs-number">-1</span>;<br><span class="hljs-number">123</span> <span class="hljs-keyword">int</span> t;<br><span class="hljs-number">124</span> <br><span class="hljs-number">125</span> <span class="hljs-keyword">while</span> (i &lt; j) <br><span class="hljs-number">126</span>     &#123;<br><span class="hljs-number">127</span> t = pArr-&gt;pBase[i];<br><span class="hljs-number">128</span> pArr-&gt;pBase[i] = pArr-&gt;pBase[j];<br><span class="hljs-number">129</span> pArr-&gt;pBase[j] = t;<br><span class="hljs-number">130</span> ++i;<br><span class="hljs-number">131</span> --j;<br><span class="hljs-number">132</span>     &#125;<br><span class="hljs-number">133</span> <span class="hljs-keyword">return</span>;<br><span class="hljs-number">134</span> &#125;<br><span class="hljs-number">135</span> <br><span class="hljs-number">136</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort_arr</span> <span class="hljs-params">(struct Arr * pArr)</span></span><br><span class="hljs-function">137 </span>&#123;<br><span class="hljs-number">138</span> <span class="hljs-keyword">int</span> i,j,t;<br><span class="hljs-number">139</span> <br><span class="hljs-number">140</span> <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;pArr-&gt;cnt<span class="hljs-number">-1</span>; ++i)<br><span class="hljs-number">141</span>     &#123;<br><span class="hljs-number">142</span> <span class="hljs-keyword">for</span> (j=i+<span class="hljs-number">1</span>; j&lt;pArr-&gt;cnt; ++j)<br><span class="hljs-number">143</span>     &#123;<br><span class="hljs-number">144</span> <span class="hljs-keyword">if</span> (pArr-&gt;pBase[i]&gt;pArr-&gt;pBase[j])<br><span class="hljs-number">145</span>     &#123;<br><span class="hljs-number">146</span> t = pArr-&gt;pBase[j];<br><span class="hljs-number">147</span> pArr-&gt;pBase[j]=pArr-&gt;pBase[i];<br><span class="hljs-number">148</span> pArr-&gt;pBase[i]=t;<br><span class="hljs-number">149</span>     &#125;<br><span class="hljs-number">150</span>     &#125;<br><span class="hljs-number">151</span>     &#125;<br><span class="hljs-number">152</span> <span class="hljs-keyword">return</span>;<br><span class="hljs-number">153</span> &#125;<br></code></pre></td></tr></table></figure></blockquote></li></ol></li><li><h4 id="离散结构【链表】"><a href="#离散结构【链表】" class="headerlink" title="离散结构【链表】"></a>离散结构【链表】</h4><ul><li><p>定义：n个节点离散分配，彼此通过指针相连，每个节点只有一个前驱节点同时每个节点只有一个后续节点，首节点没有前驱节点，尾节点没有后续节点。</p><blockquote><p>专业术语</p><ul><li>首节点：存放第一个有效数据的节点</li><li>尾节点：存放最后一个有效数据的节点</li><li>头结点：位于首节点之前的一个节点，头结点并不存放有效的数据，加头结点的目的主要是为了方便对链表的操作</li><li>头指针：指向头结点的指针变量</li><li>尾指针：指向尾节点的指针变量</li></ul></blockquote></li><li><p>确定一个链表需要几个参数：只需要一个头指针参数，因为我们通过头指针可以推算出链表的其他所有信息</p><blockquote><p>例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs c"> <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-number">2</span> <br> <span class="hljs-number">3</span> <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class"> 4 &#123;</span><br> <span class="hljs-number">5</span>  <span class="hljs-keyword">int</span> data;<span class="hljs-comment">//数据域</span><br> <span class="hljs-number">6</span>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> * <span class="hljs-title">PNext</span>;</span><span class="hljs-comment">//指针域</span><br> <span class="hljs-number">7</span> &#125; NODE, *PNODE;<span class="hljs-comment">//NODE等价于struct Node，PNODE等价于struct Node *</span><br> <span class="hljs-number">8</span> <br> <span class="hljs-number">9</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function">10 </span>&#123;   <br><span class="hljs-number">11</span>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number"><code class="language-hljs c"> <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-number">2</span> <br> <span class="hljs-number">3</span> <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class"> 4 &#123;</span><br> <span class="hljs-number">5</span>  <span class="hljs-keyword">int</span> data;<span class="hljs-comment">//数据域</span><br> <span class="hljs-number">6</span>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> * <span class="hljs-title">PNext</span>;</span><span class="hljs-comment">//指针域</span><br> <span class="hljs-number">7</span> &#125; NODE, *PNODE;<span class="hljs-comment">//NODE等价于struct Node，PNODE等价于struct Node *</span><br> <span class="hljs-number">8</span> <br> <span class="hljs-number">9</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function">10 </span>&#123;   <br><span class="hljs-number">11</span>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">12</span> &#125;<br></code></pre></td></tr></table></figure></blockquote></li><li><p>分类</p><ul><li><p>单链表：每一个节点只有一个指针域</p></li><li><p>双链表：每一个节点有两个指针域</p></li><li><p>循环链表：能通过任何一个节点找到其他所有的节点</p></li><li><p>非循环链表：不能通过任何一个节点找到其他所有的节点</p><blockquote><p>循环链表属于双链表的一种特殊形式，即循环链表是双链表的一个子集。</p></blockquote></li></ul></li><li><p>优缺点</p><ul><li>优点：空间没有限制，插入和删除元素很快</li><li>缺点：存取速度很慢</li></ul></li><li><p>算法</p><blockquote><p>算法：</p><ul><li>侠义的算法是与数据的存储方式密切相关</li><li>广义的算法是与数据的存储方式无关</li></ul><p>泛型：利用某种技术达到的效果就是：不同的存储方式，执行的操作是一样的</p></blockquote><ul><li>遍历</li><li>查找</li><li>清空</li><li>销毁</li><li>求长度</li><li>排序</li><li>删除节点</li><li>插入节点</li></ul><blockquote><p>代码实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre class=" language-hljs c">  <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br>  <span class="hljs-number">2</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br>  <span class="hljs-number">3</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdbool.h&gt;</span></span><br>  <span class="hljs-number">4</span> <br>  <span class="hljs-number">5</span> <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">  6 &#123;</span><br>  <span class="hljs-number">7</span> <span class="hljs-keyword">int</span> data;<span class="hljs-comment">//数据域</span><br>  <span class="hljs-number">8</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> * <span class="hljs-title">pNext</span>;</span><span class="hljs-comment">//指针域</span><br>  <span class="hljs-number">9</span> &#125;NODE,*PNODE；<span class="hljs-comment">//NODE相当于struct Node，*PNODE相当于struct Node *</span><br> <span class="hljs-number">10</span> <br> <span class="hljs-number">11</span> <span class="hljs-comment">//创建链表</span><br> <span class="hljs-number">12</span> <span class="hljs-function">PNODE <span class="hljs-title">create_list</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br> <span class="hljs-number">13</span> <span class="hljs-comment">//遍历链表</span><br> <span class="hljs-number">14</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse_list</span><span class="hljs-params">(PNODE pHead)</span></span>;<br> <span class="hljs-number">15</span> <span class="hljs-comment">//判断是否为空</span><br> <span class="hljs-number">16</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(PNODE pHead)</span></span>;<br> <span class="hljs-number">17</span> <span class="hljs-comment">//返回链表长度</span><br> <span class="hljs-number">18</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">length_list</span><span class="hljs-params">(PNODE pHead)</span></span>;<br> <span class="hljs-number">19</span> <span class="hljs-comment">//在指定节点处插入某个元素</span><br> <span class="hljs-number">20</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">insert_list</span><span class="hljs-params">(PNODE,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)</span></span>;<br> <span class="hljs-number">21</span> <span class="hljs-comment">//删除指定位置的元素</span><br> <span class="hljs-number">22</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">delete_list</span><span class="hljs-params">(PNODE,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span> *)</span></span>;<br> <span class="hljs-number">23</span> <span class="hljs-comment">//对链表排序</span><br> <span class="hljs-number">24</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort_list</span><span class="hljs-params">(PNODE pHead)</span></span>;<br> <span class="hljs-number">25</span> <br> <span class="hljs-number">26</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 27 </span>&#123;<br> <span class="hljs-number">28</span> PNODE pHead = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//定义头结点指针</span><br> <span class="hljs-number">29</span> pHead = create_list();<br> <span class="hljs-number">30</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> <span class="hljs-number">31</span> &#125;<br> <span class="hljs-number">32</span> <br> <span class="hljs-number">33</span> <span class="hljs-function">PNODE <span class="hljs-title">create_list</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 34 </span>&#123;<br> <span class="hljs-number">35</span> <span class="hljs-keyword">int</span> len;<span class="hljs-comment">//链表成员个数，由用户输入</span><br> <span class="hljs-number">36</span> <span class="hljs-keyword">int</span> i;<br> <span class="hljs-number">37</span> <span class="hljs-keyword">int</span> val;<span class="hljs-comment">//链表成员值，由用户输入</span><br> <span class="hljs-number">38</span> <br> <span class="hljs-number">39</span> PNODE pHead = (PNODE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(NODE));<span class="hljs-comment">//定义头结点指针</span><br> <span class="hljs-number">40</span> <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pHead)<br> <span class="hljs-number">41</span> &#123;<br> <span class="hljs-number">42</span>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配内存失败，程序结束&quot;</span>);<br> <span class="hljs-number">43</span>   <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br> <span class="hljs-number">44</span> &#125;<br> <span class="hljs-number">45</span> <br> <span class="hljs-number">46</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入链表长度,len=&quot;</span>);<br> <span class="hljs-number">47</span> <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;len);<br> <span class="hljs-number">48</span> <br> <span class="hljs-number">49</span> PNODE pTail = pHead;<br> <span class="hljs-number">50</span> pTail-&gt;pNext = <span class="hljs-literal">NULL</span>;<br> <span class="hljs-number">51</span> <br> <span class="hljs-number">52</span> <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i &lt; len; i++)<br> <span class="hljs-number">53</span> &#123;<br> <span class="hljs-number">54</span>   PNODE pNew = (PNODE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(NODE));<br> <span class="hljs-number">55</span>   <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pNew)<br> <span class="hljs-number">56</span>      &#123;<br> <span class="hljs-number">57</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配内存失败，程序结束&quot;</span>);<br> <span class="hljs-number">58</span>     <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br> <span class="hljs-number">59</span>      &#125;<br> <span class="hljs-number">60</span>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入要插入链表的值,val=&quot;</span>);<br> <span class="hljs-number">61</span>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;val);<br> <span class="hljs-number">62</span>   <br> <span class="hljs-number">63</span>   pNew-&gt;data = val;<br> <span class="hljs-number">64</span>   pTail-&gt;pNext = pNew;<br> <span class="hljs-number">65</span>   pNew-&gt;pNext = <span class="hljs-literal">NULL</span>;<br> <span class="hljs-number">66</span>   pTail = pNew;<br> <span class="hljs-number">67</span> &#125;<br> <span class="hljs-number">68</span> <span class="hljs-keyword">return</span> pHead;<br> <span class="hljs-number">69</span> &#125;<br> <span class="hljs-number">70</span> <br> <span class="hljs-number">71</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse_list</span><span class="hljs-params">(PNODE pHead)</span></span><br><span class="hljs-function"> 72 </span>&#123;<br> <span class="hljs-number">73</span>  PNODE p = pHead-&gt;pNext;<br> <span class="hljs-number">74</span>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> != p)<br> <span class="hljs-number">75</span>  &#123;<br> <span class="hljs-number">76</span>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\t&quot;</span>,p-&gt;data);<br> <span class="hljs-number">77</span>      p = p-&gt;pNext;<br> <span class="hljs-number">78</span>  &#125;<br> <span class="hljs-number">79</span>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br> <span class="hljs-number">80</span>  <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">81</span> &#125;<br> <span class="hljs-number">82</span> <br> <span class="hljs-number">83</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(PNODE pHead)</span></span><br><span class="hljs-function"> 84 </span>&#123;<br> <span class="hljs-number">85</span>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pHead-&gt;pNext)<br> <span class="hljs-number">86</span>     <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br> <span class="hljs-number">87</span>  <span class="hljs-keyword">else</span><br> <span class="hljs-number">88</span>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br> <span class="hljs-number">89</span> &#125;<br> <span class="hljs-number">90</span> <br> <span class="hljs-number">91</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">length_list</span><span class="hljs-params">(PNODE pHead)</span></span><br><span class="hljs-function"> 92 </span>&#123;<br> <span class="hljs-number">93</span>  <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br> <span class="hljs-number">94</span>  PNODE p = pHead-&gt;pNext;<br> <span class="hljs-number">95</span>  <span class="hljs-keyword">while</span>(<span class="hljs-literal">NULL</span> != p)<br> <span class="hljs-number">96</span>  &#123;<br> <span class="hljs-number">97</span>      ++len;<br> <span class="hljs-number">98</span>      p = p-&gt;pNext;<br> <span class="hljs-number">99</span>  &#125;<br><span class="hljs-number">100</span>  <span class="hljs-keyword">return</span> len;<br><span class="hljs-number">101</span> &#125;<br><span class="hljs-number">102</span> <br><span class="hljs-number">103</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">insert_list</span><span class="hljs-params">(PNODE pHead,<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function">104 </span>&#123;<br><span class="hljs-number">105</span>  <span class="hljs-keyword">int</span> i;<br><span class="hljs-number">106</span>  PNODE p = pHead;<br><span class="hljs-number">107</span>  <span class="hljs-comment">//循环到p指向pos-1的位置</span><br><span class="hljs-number">108</span>  <span class="hljs-keyword">while</span>( <span class="hljs-literal">NULL</span> != p &amp;&amp; i&lt;pos<span class="hljs-number">-1</span>)<br><span class="hljs-number">109</span>  &#123;<br><span class="hljs-number">110</span>      p = p-&gt;pNext;<br><span class="hljs-number">111</span>      ++i;<br><span class="hljs-number">112</span>  &#125;<br><span class="hljs-number">113</span>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == p || i &gt; pos <span class="hljs-number">-1</span>)<br><span class="hljs-number">114</span>  &#123;<br><span class="hljs-number">115</span>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-number">116</span>  &#125;<br><span class="hljs-number">117</span>  <span class="hljs-comment">//插入的数申请内存</span><br><span class="hljs-number">118</span>  PNODE pNew = (PNODE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(NODE));<br><span class="hljs-number">119</span>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pNew)<br><span class="hljs-number">120</span>     &#123;<br><span class="hljs-number">121</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配内存失败，程序终止！\n&quot;</span>);<br><span class="hljs-number">122</span>         <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-number">123</span>     &#125;<br><span class="hljs-number">124</span>  pNew-&gt;data = val;<br><span class="hljs-number">125</span>  PNODE q = p-&gt;pNext;<br><span class="hljs-number">126</span>  p-&gt;pNext = pNew;<br><span class="hljs-number">127</span>  pNew-&gt;pNext = q;<br><span class="hljs-number">128</span>  <span class="hljs-keyword">return</span> ture;<br><span class="hljs-number">129</span> &#125; <br><span class="hljs-number">130</span> <br><span class="hljs-number">131</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">delete_list</span><span class="hljs-params">(PNODE pHead,<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> *pVal)</span></span><br><span class="hljs-function">132 </span>&#123;<br><span class="hljs-number">133</span>  <span class="hljs-keyword">int</span> i;<br><span class="hljs-number">134</span>  PNODE p = pHead;<br><span class="hljs-number">135</span>  <span class="hljs-comment">//循环到p指向pos-1的位置</span><br><span class="hljs-number">136</span>  <span class="hljs-keyword">while</span>( <span class="hljs-literal">NULL</span> != p-&gt;pNext &amp;&amp; i&lt;pos<span class="hljs-number">-1</span>)<br><span class="hljs-number">137</span>  &#123;<br><span class="hljs-number">138</span>      p = p-&gt;pNext;<br><span class="hljs-number">139</span>      ++i;<br><span class="hljs-number">140</span>  &#125;<br><span class="hljs-number">141</span> <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == p-&gt;pNext || i &gt; pos <span class="hljs-number">-1</span>)<br><span class="hljs-number">142</span>  &#123;<br><span class="hljs-number">143</span>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-number">144</span>  &#125;<br><span class="hljs-number">145</span> PNODE q = p-&gt;pNext;<br><span class="hljs-number">146</span> *pVal = p-&gt;data;<br><span class="hljs-number">147</span> p-&gt;pNext=q-&gt;pNext;<br><span class="hljs-number">148</span> <span class="hljs-built_in">free</span>(q);<br><span class="hljs-number">149</span> q=<span class="hljs-literal">NULL</span>;<br><span class="hljs-number">150</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-number">151</span> &#125;<br><span class="hljs-number">152</span> <br><span class="hljs-number">153</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort_list</span><span class="hljs-params">(PNODE pHead)</span></span><br><span class="hljs-function">154 </span>&#123;<br><span class="hljs-number">155</span> <span class="hljs-keyword">int</span> i,j,t;<br><span class="hljs-number">156</span> PNODE p,q;<br><span class="hljs-number">157</span> <span class="hljs-keyword">int</span> len = length_list(pHead);<br><span class="hljs-number">158</span> <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>,p=pHead-&gt;pNext;i&lt;len<span class="hljs-number">-1</span>;i++,p=p-&gt;pNext)<br><span class="hljs-number">159</span>  &#123;<br><span class="hljs-number">160</span>      <span class="hljs-keyword">for</span>(j=i+<span class="hljs-number">1</span>,q=p-&gt;pNext;j&lt;len;j++,q=q-&gt;pNext)<br><span class="hljs-number">161</span>      &#123;<br><span class="hljs-number">162</span>          <span class="hljs-keyword">if</span>(p-&gt;data &gt; q-&gt;data)<br><span class="hljs-number">163</span>          &#123;<br><span class="hljs-number">164</span>              t = p-&gt;data;<br><span class="hljs-number">165</span>              p-&gt;data = q-&gt;data;<br><span class="hljs-number">166</span>              q-&gt;data = t; <br><span class="hljs-number">167</span>          &#125;<br><span class="hljs-number">168</span>      &#125;<br><span class="hljs-number">169</span>  &#125;<br><span class="hljs-number">170</span> <span class="hljs-keyword">return</span>;<br><span class="hljs-number"><code class="language-hljs c">  <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br>  <span class="hljs-number">2</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br>  <span class="hljs-number">3</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdbool.h&gt;</span></span><br>  <span class="hljs-number">4</span> <br>  <span class="hljs-number">5</span> <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">  6 &#123;</span><br>  <span class="hljs-number">7</span> <span class="hljs-keyword">int</span> data;<span class="hljs-comment">//数据域</span><br>  <span class="hljs-number">8</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> * <span class="hljs-title">pNext</span>;</span><span class="hljs-comment">//指针域</span><br>  <span class="hljs-number">9</span> &#125;NODE,*PNODE；<span class="hljs-comment">//NODE相当于struct Node，*PNODE相当于struct Node *</span><br> <span class="hljs-number">10</span> <br> <span class="hljs-number">11</span> <span class="hljs-comment">//创建链表</span><br> <span class="hljs-number">12</span> <span class="hljs-function">PNODE <span class="hljs-title">create_list</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br> <span class="hljs-number">13</span> <span class="hljs-comment">//遍历链表</span><br> <span class="hljs-number">14</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse_list</span><span class="hljs-params">(PNODE pHead)</span></span>;<br> <span class="hljs-number">15</span> <span class="hljs-comment">//判断是否为空</span><br> <span class="hljs-number">16</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(PNODE pHead)</span></span>;<br> <span class="hljs-number">17</span> <span class="hljs-comment">//返回链表长度</span><br> <span class="hljs-number">18</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">length_list</span><span class="hljs-params">(PNODE pHead)</span></span>;<br> <span class="hljs-number">19</span> <span class="hljs-comment">//在指定节点处插入某个元素</span><br> <span class="hljs-number">20</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">insert_list</span><span class="hljs-params">(PNODE,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)</span></span>;<br> <span class="hljs-number">21</span> <span class="hljs-comment">//删除指定位置的元素</span><br> <span class="hljs-number">22</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">delete_list</span><span class="hljs-params">(PNODE,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span> *)</span></span>;<br> <span class="hljs-number">23</span> <span class="hljs-comment">//对链表排序</span><br> <span class="hljs-number">24</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort_list</span><span class="hljs-params">(PNODE pHead)</span></span>;<br> <span class="hljs-number">25</span> <br> <span class="hljs-number">26</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 27 </span>&#123;<br> <span class="hljs-number">28</span> PNODE pHead = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//定义头结点指针</span><br> <span class="hljs-number">29</span> pHead = create_list();<br> <span class="hljs-number">30</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> <span class="hljs-number">31</span> &#125;<br> <span class="hljs-number">32</span> <br> <span class="hljs-number">33</span> <span class="hljs-function">PNODE <span class="hljs-title">create_list</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 34 </span>&#123;<br> <span class="hljs-number">35</span> <span class="hljs-keyword">int</span> len;<span class="hljs-comment">//链表成员个数，由用户输入</span><br> <span class="hljs-number">36</span> <span class="hljs-keyword">int</span> i;<br> <span class="hljs-number">37</span> <span class="hljs-keyword">int</span> val;<span class="hljs-comment">//链表成员值，由用户输入</span><br> <span class="hljs-number">38</span> <br> <span class="hljs-number">39</span> PNODE pHead = (PNODE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(NODE));<span class="hljs-comment">//定义头结点指针</span><br> <span class="hljs-number">40</span> <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pHead)<br> <span class="hljs-number">41</span> &#123;<br> <span class="hljs-number">42</span>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配内存失败，程序结束&quot;</span>);<br> <span class="hljs-number">43</span>   <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br> <span class="hljs-number">44</span> &#125;<br> <span class="hljs-number">45</span> <br> <span class="hljs-number">46</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入链表长度,len=&quot;</span>);<br> <span class="hljs-number">47</span> <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;len);<br> <span class="hljs-number">48</span> <br> <span class="hljs-number">49</span> PNODE pTail = pHead;<br> <span class="hljs-number">50</span> pTail-&gt;pNext = <span class="hljs-literal">NULL</span>;<br> <span class="hljs-number">51</span> <br> <span class="hljs-number">52</span> <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i &lt; len; i++)<br> <span class="hljs-number">53</span> &#123;<br> <span class="hljs-number">54</span>   PNODE pNew = (PNODE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(NODE));<br> <span class="hljs-number">55</span>   <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pNew)<br> <span class="hljs-number">56</span>      &#123;<br> <span class="hljs-number">57</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配内存失败，程序结束&quot;</span>);<br> <span class="hljs-number">58</span>     <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br> <span class="hljs-number">59</span>      &#125;<br> <span class="hljs-number">60</span>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入要插入链表的值,val=&quot;</span>);<br> <span class="hljs-number">61</span>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;val);<br> <span class="hljs-number">62</span>   <br> <span class="hljs-number">63</span>   pNew-&gt;data = val;<br> <span class="hljs-number">64</span>   pTail-&gt;pNext = pNew;<br> <span class="hljs-number">65</span>   pNew-&gt;pNext = <span class="hljs-literal">NULL</span>;<br> <span class="hljs-number">66</span>   pTail = pNew;<br> <span class="hljs-number">67</span> &#125;<br> <span class="hljs-number">68</span> <span class="hljs-keyword">return</span> pHead;<br> <span class="hljs-number">69</span> &#125;<br> <span class="hljs-number">70</span> <br> <span class="hljs-number">71</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse_list</span><span class="hljs-params">(PNODE pHead)</span></span><br><span class="hljs-function"> 72 </span>&#123;<br> <span class="hljs-number">73</span>  PNODE p = pHead-&gt;pNext;<br> <span class="hljs-number">74</span>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> != p)<br> <span class="hljs-number">75</span>  &#123;<br> <span class="hljs-number">76</span>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\t&quot;</span>,p-&gt;data);<br> <span class="hljs-number">77</span>      p = p-&gt;pNext;<br> <span class="hljs-number">78</span>  &#125;<br> <span class="hljs-number">79</span>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br> <span class="hljs-number">80</span>  <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">81</span> &#125;<br> <span class="hljs-number">82</span> <br> <span class="hljs-number">83</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(PNODE pHead)</span></span><br><span class="hljs-function"> 84 </span>&#123;<br> <span class="hljs-number">85</span>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pHead-&gt;pNext)<br> <span class="hljs-number">86</span>     <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br> <span class="hljs-number">87</span>  <span class="hljs-keyword">else</span><br> <span class="hljs-number">88</span>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br> <span class="hljs-number">89</span> &#125;<br> <span class="hljs-number">90</span> <br> <span class="hljs-number">91</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">length_list</span><span class="hljs-params">(PNODE pHead)</span></span><br><span class="hljs-function"> 92 </span>&#123;<br> <span class="hljs-number">93</span>  <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br> <span class="hljs-number">94</span>  PNODE p = pHead-&gt;pNext;<br> <span class="hljs-number">95</span>  <span class="hljs-keyword">while</span>(<span class="hljs-literal">NULL</span> != p)<br> <span class="hljs-number">96</span>  &#123;<br> <span class="hljs-number">97</span>      ++len;<br> <span class="hljs-number">98</span>      p = p-&gt;pNext;<br> <span class="hljs-number">99</span>  &#125;<br><span class="hljs-number">100</span>  <span class="hljs-keyword">return</span> len;<br><span class="hljs-number">101</span> &#125;<br><span class="hljs-number">102</span> <br><span class="hljs-number">103</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">insert_list</span><span class="hljs-params">(PNODE pHead,<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function">104 </span>&#123;<br><span class="hljs-number">105</span>  <span class="hljs-keyword">int</span> i;<br><span class="hljs-number">106</span>  PNODE p = pHead;<br><span class="hljs-number">107</span>  <span class="hljs-comment">//循环到p指向pos-1的位置</span><br><span class="hljs-number">108</span>  <span class="hljs-keyword">while</span>( <span class="hljs-literal">NULL</span> != p &amp;&amp; i&lt;pos<span class="hljs-number">-1</span>)<br><span class="hljs-number">109</span>  &#123;<br><span class="hljs-number">110</span>      p = p-&gt;pNext;<br><span class="hljs-number">111</span>      ++i;<br><span class="hljs-number">112</span>  &#125;<br><span class="hljs-number">113</span>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == p || i &gt; pos <span class="hljs-number">-1</span>)<br><span class="hljs-number">114</span>  &#123;<br><span class="hljs-number">115</span>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-number">116</span>  &#125;<br><span class="hljs-number">117</span>  <span class="hljs-comment">//插入的数申请内存</span><br><span class="hljs-number">118</span>  PNODE pNew = (PNODE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(NODE));<br><span class="hljs-number">119</span>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pNew)<br><span class="hljs-number">120</span>     &#123;<br><span class="hljs-number">121</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配内存失败，程序终止！\n&quot;</span>);<br><span class="hljs-number">122</span>         <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br><span class="hljs-number">123</span>     &#125;<br><span class="hljs-number">124</span>  pNew-&gt;data = val;<br><span class="hljs-number">125</span>  PNODE q = p-&gt;pNext;<br><span class="hljs-number">126</span>  p-&gt;pNext = pNew;<br><span class="hljs-number">127</span>  pNew-&gt;pNext = q;<br><span class="hljs-number">128</span>  <span class="hljs-keyword">return</span> ture;<br><span class="hljs-number">129</span> &#125; <br><span class="hljs-number">130</span> <br><span class="hljs-number">131</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">delete_list</span><span class="hljs-params">(PNODE pHead,<span class="hljs-keyword">int</span> pos,<span class="hljs-keyword">int</span> *pVal)</span></span><br><span class="hljs-function">132 </span>&#123;<br><span class="hljs-number">133</span>  <span class="hljs-keyword">int</span> i;<br><span class="hljs-number">134</span>  PNODE p = pHead;<br><span class="hljs-number">135</span>  <span class="hljs-comment">//循环到p指向pos-1的位置</span><br><span class="hljs-number">136</span>  <span class="hljs-keyword">while</span>( <span class="hljs-literal">NULL</span> != p-&gt;pNext &amp;&amp; i&lt;pos<span class="hljs-number">-1</span>)<br><span class="hljs-number">137</span>  &#123;<br><span class="hljs-number">138</span>      p = p-&gt;pNext;<br><span class="hljs-number">139</span>      ++i;<br><span class="hljs-number">140</span>  &#125;<br><span class="hljs-number">141</span> <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == p-&gt;pNext || i &gt; pos <span class="hljs-number">-1</span>)<br><span class="hljs-number">142</span>  &#123;<br><span class="hljs-number">143</span>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-number">144</span>  &#125;<br><span class="hljs-number">145</span> PNODE q = p-&gt;pNext;<br><span class="hljs-number">146</span> *pVal = p-&gt;data;<br><span class="hljs-number">147</span> p-&gt;pNext=q-&gt;pNext;<br><span class="hljs-number">148</span> <span class="hljs-built_in">free</span>(q);<br><span class="hljs-number">149</span> q=<span class="hljs-literal">NULL</span>;<br><span class="hljs-number">150</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-number">151</span> &#125;<br><span class="hljs-number">152</span> <br><span class="hljs-number">153</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">sort_list</span><span class="hljs-params">(PNODE pHead)</span></span><br><span class="hljs-function">154 </span>&#123;<br><span class="hljs-number">155</span> <span class="hljs-keyword">int</span> i,j,t;<br><span class="hljs-number">156</span> PNODE p,q;<br><span class="hljs-number">157</span> <span class="hljs-keyword">int</span> len = length_list(pHead);<br><span class="hljs-number">158</span> <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>,p=pHead-&gt;pNext;i&lt;len<span class="hljs-number">-1</span>;i++,p=p-&gt;pNext)<br><span class="hljs-number">159</span>  &#123;<br><span class="hljs-number">160</span>      <span class="hljs-keyword">for</span>(j=i+<span class="hljs-number">1</span>,q=p-&gt;pNext;j&lt;len;j++,q=q-&gt;pNext)<br><span class="hljs-number">161</span>      &#123;<br><span class="hljs-number">162</span>          <span class="hljs-keyword">if</span>(p-&gt;data &gt; q-&gt;data)<br><span class="hljs-number">163</span>          &#123;<br><span class="hljs-number">164</span>              t = p-&gt;data;<br><span class="hljs-number">165</span>              p-&gt;data = q-&gt;data;<br><span class="hljs-number">166</span>              q-&gt;data = t; <br><span class="hljs-number">167</span>          &#125;<br><span class="hljs-number">168</span>      &#125;<br><span class="hljs-number">169</span>  &#125;<br><span class="hljs-number">170</span> <span class="hljs-keyword">return</span>;<br><span class="hljs-number">171</span> &#125; <br></code></pre></td></tr></table></figure></blockquote></li></ul></li><li><h4 id="线性结构的两种常见应用之一：栈"><a href="#线性结构的两种常见应用之一：栈" class="headerlink" title="线性结构的两种常见应用之一：栈"></a>线性结构的两种常见应用之一：栈</h4><ul><li>定义：一种可以实现“先进后出”的存储结构</li><li>分类：静态栈；动态栈。</li><li>算法：压栈；出栈</li><li>应用：函数调用；中断；表达式求值；内存分配；缓冲处理；迷宫</li></ul><blockquote><p>示例代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre class=" language-hljs c">  <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br>  <span class="hljs-number">2</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br>  <span class="hljs-number">3</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br>  <span class="hljs-number">4</span> <br>  <span class="hljs-number">5</span> <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">  6 &#123;</span><br>  <span class="hljs-number">7</span>     <span class="hljs-keyword">int</span> data;<br>  <span class="hljs-number">8</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> * <span class="hljs-title">pNext</span>;</span><br>  <span class="hljs-number">9</span> &#125;NODE,* PNODE;<br> <span class="hljs-number">10</span> <br> <span class="hljs-number">11</span> <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stack</span></span><br><span class="hljs-class"> 12 &#123;</span><br> <span class="hljs-number">13</span>     PNODE pTop;<br> <span class="hljs-number">14</span>     PNODE pBottom;<br> <span class="hljs-number">15</span> &#125;STACK,* PSTACK;<br> <span class="hljs-number">16</span> <br> <span class="hljs-number">17</span> <span class="hljs-comment">//初始化</span><br> <span class="hljs-number">18</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init_stack</span><span class="hljs-params">(PSTACK)</span></span>;<br> <span class="hljs-number">19</span> <span class="hljs-comment">//压栈</span><br> <span class="hljs-number">20</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_stack</span><span class="hljs-params">(PSTACK,<span class="hljs-keyword">int</span>)</span></span>;<br> <span class="hljs-number">21</span> <span class="hljs-comment">//出栈</span><br> <span class="hljs-number">22</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pop_stack</span><span class="hljs-params">(PSTACK)</span></span>;<br> <span class="hljs-number">23</span> <span class="hljs-comment">//遍历栈</span><br> <span class="hljs-number">24</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse_stack</span><span class="hljs-params">(PSTACK)</span></span>;<br> <span class="hljs-number">25</span> <span class="hljs-comment">//判断栈是否为空</span><br> <span class="hljs-number">26</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(PSTACK)</span></span>;<br> <span class="hljs-number">27</span> <span class="hljs-comment">//清空栈</span><br> <span class="hljs-number">28</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(PSTACK)</span></span>;<br> <span class="hljs-number">29</span> <br> <span class="hljs-number">30</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 31 </span>&#123;<br> <span class="hljs-number">32</span>     <span class="hljs-keyword">int</span> val;<span class="hljs-comment">//出栈的值</span><br> <span class="hljs-number">33</span>     STACK s;<br> <span class="hljs-number">34</span>     init_stack(&amp;s);<span class="hljs-comment">//目的是造出一个空栈</span><br> <span class="hljs-number">35</span>     push_stack(&amp;s,<span class="hljs-number">1</span>);<span class="hljs-comment">//压栈</span><br> <span class="hljs-number">36</span>     push_stack(&amp;s,<span class="hljs-number">2</span>);<br> <span class="hljs-number">37</span>     push_stack(&amp;s,<span class="hljs-number">3</span>);<br> <span class="hljs-number">38</span>     push_stack(&amp;s,<span class="hljs-number">4</span>);<br> <span class="hljs-number">39</span>     push_stack(&amp;s,<span class="hljs-number">5</span>);<br> <span class="hljs-number">40</span>     traverse_stack(&amp;s);<br> <span class="hljs-number">41</span>     pop_stack(&amp;s,&amp;val);<br> <span class="hljs-number">42</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> <span class="hljs-number">43</span> &#125;<br> <span class="hljs-number">44</span> <br> <span class="hljs-number">45</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init_stack</span><span class="hljs-params">(PSTACK pS)</span></span><br><span class="hljs-function"> 46 </span>&#123;<br> <span class="hljs-number">47</span>     pS-&gt;pTop=(PNODE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(NODE));<br> <span class="hljs-number">48</span>     <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pS-&gt;pTop)<br> <span class="hljs-number">49</span>     &#123;<br> <span class="hljs-number">50</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配内存失败，程序终止！\n&quot;</span>);<br> <span class="hljs-number">51</span>         <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br> <span class="hljs-number">52</span>     &#125;<br> <span class="hljs-number">53</span>     <span class="hljs-keyword">else</span> <br> <span class="hljs-number">54</span>     &#123;<br> <span class="hljs-number">55</span>         pS-&gt;pBottom = pS-&gt;pTop;<br> <span class="hljs-number">56</span>         pS-&gt;pTop-&gt;pNext = <span class="hljs-literal">NULL</span>;<br> <span class="hljs-number">57</span>     &#125;<br> <span class="hljs-number">58</span>     <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">59</span> &#125;<br> <span class="hljs-number">60</span> <br> <span class="hljs-number">61</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_stack</span><span class="hljs-params">(PSTACK pS,<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"> 62 </span>&#123;<br> <span class="hljs-number">63</span>     PNODE pNew = (PNODE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(NODE));<br> <span class="hljs-number">64</span>     <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pNew)<br> <span class="hljs-number">65</span>     &#123;<br> <span class="hljs-number">66</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配内存失败，程序终止！\n&quot;</span>);<br> <span class="hljs-number">67</span>         <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br> <span class="hljs-number">68</span>     &#125;<br> <span class="hljs-number">69</span>     pNew-&gt;data = val;<br> <span class="hljs-number">70</span>     pNew-&gt;pNext = pS-&gt;pTop;<br> <span class="hljs-number">71</span>     pS-&gt;pTop = pNew;<br> <span class="hljs-number">72</span>     <br> <span class="hljs-number">73</span>     <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">74</span> &#125;<br> <span class="hljs-number">75</span> <br> <span class="hljs-number">76</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse_stack</span><span class="hljs-params">(PSTACK pS)</span></span><br><span class="hljs-function"> 77 </span>&#123;<br> <span class="hljs-number">78</span>     <br> <span class="hljs-number">79</span>     PNODE p = pS-&gt;pTop;<br> <span class="hljs-number">80</span>     <span class="hljs-keyword">while</span> (p != ps-&gt;pBottom) <br> <span class="hljs-number">81</span>     &#123;<br> <span class="hljs-number">82</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\t&quot;</span>,p-&gt;data);<br> <span class="hljs-number">83</span>         p = p-&gt;pNext;<br> <span class="hljs-number">84</span>     &#125;<br> <span class="hljs-number">85</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br> <span class="hljs-number">86</span>     <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">87</span> &#125;<br> <span class="hljs-number">88</span> <br> <span class="hljs-number">89</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(PSTACK pS)</span></span><br><span class="hljs-function"> 90 </span>&#123;<br> <span class="hljs-number">91</span>     <span class="hljs-keyword">if</span> (pS-&gt;pTop == pS-&gt;pBottom)<br> <span class="hljs-number">92</span>         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br> <span class="hljs-number">93</span>     <span class="hljs-keyword">else</span> <br> <span class="hljs-number">94</span>         <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br> <span class="hljs-number">95</span> &#125;<br> <span class="hljs-number">96</span> <br> <span class="hljs-number">97</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">pop_stack</span><span class="hljs-params">(PSTACK pS,*pVal)</span></span><br><span class="hljs-function"> 98 </span>&#123;<br> <span class="hljs-number">99</span>     <span class="hljs-keyword">if</span> (is_empty(pS))&#123;<br><span class="hljs-number">100</span>         <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-number">101</span>     &#125;<br><span class="hljs-number">102</span>     <span class="hljs-keyword">else</span> <br><span class="hljs-number">103</span>     &#123;<br><span class="hljs-number">104</span>         PNODE p = pS-&gt;pTop;<br><span class="hljs-number">105</span>         *pVal = p-&gt;data;<br><span class="hljs-number">106</span>         pS-&gt;pTop = p-&gt;pNext;<br><span class="hljs-number">107</span>         <span class="hljs-built_in">free</span>(p);<br><span class="hljs-number">108</span>         p = <span class="hljs-literal">NULL</span>;<br><span class="hljs-number">109</span>         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-number">110</span>     &#125;<br><span class="hljs-number">111</span> &#125;<br><span class="hljs-number">112</span> <br><span class="hljs-number">113</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(PSTACK pS)</span></span><br><span class="hljs-function">114 </span>&#123;<br><span class="hljs-number">115</span>     <span class="hljs-keyword">if</span>(is_empty(pS))<br><span class="hljs-number">116</span>         <span class="hljs-keyword">return</span>;<br><span class="hljs-number">117</span>     <span class="hljs-keyword">else</span> <br><span class="hljs-number">118</span>     &#123;<br><span class="hljs-number">119</span>         PNODE p = pS-&gt;pTop;<br><span class="hljs-number">120</span>         PNODE q = <span class="hljs-literal">NULL</span>;<br><span class="hljs-number">121</span>         <span class="hljs-keyword">if</span>(p != pS-&gt;pBottom)<br><span class="hljs-number">122</span>         &#123;<br><span class="hljs-number">123</span> q = p-&gt;pNext;<br><span class="hljs-number">124</span> <span class="hljs-built_in">free</span>(p);<br><span class="hljs-number">125</span> p = q;<br><span class="hljs-number">126</span>     &#125;<br><span class="hljs-number">127</span> pS-&gt;pTop = pS-&gt;pBottom;<br><span class="hljs-number">128</span>     &#125;<br><span class="hljs-number">129</span> <span class="hljs-comment">/*此种方法待验证</span><br><span class="hljs-comment">130 while (!is_empty(pS)) </span><br><span class="hljs-comment">131 &#123;</span><br><span class="hljs-comment">132 PNODE p = pS-&gt;pTop;</span><br><span class="hljs-comment">133 pS-&gt;pTop = p-&gt;pNext;</span><br><span class="hljs-comment">134 free(p);</span><br><span class="hljs-comment">135 p=NULL;</span><br><span class="hljs-comment">136 &#125;</span><br><span class="hljs-comment">137 */</span><br><span class="hljs-number">138</span> <span class="hljs-keyword">return</span>;<br><span class="hljs-number"><code class="language-hljs c">  <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br>  <span class="hljs-number">2</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br>  <span class="hljs-number">3</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br>  <span class="hljs-number">4</span> <br>  <span class="hljs-number">5</span> <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">  6 &#123;</span><br>  <span class="hljs-number">7</span>     <span class="hljs-keyword">int</span> data;<br>  <span class="hljs-number">8</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> * <span class="hljs-title">pNext</span>;</span><br>  <span class="hljs-number">9</span> &#125;NODE,* PNODE;<br> <span class="hljs-number">10</span> <br> <span class="hljs-number">11</span> <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stack</span></span><br><span class="hljs-class"> 12 &#123;</span><br> <span class="hljs-number">13</span>     PNODE pTop;<br> <span class="hljs-number">14</span>     PNODE pBottom;<br> <span class="hljs-number">15</span> &#125;STACK,* PSTACK;<br> <span class="hljs-number">16</span> <br> <span class="hljs-number">17</span> <span class="hljs-comment">//初始化</span><br> <span class="hljs-number">18</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init_stack</span><span class="hljs-params">(PSTACK)</span></span>;<br> <span class="hljs-number">19</span> <span class="hljs-comment">//压栈</span><br> <span class="hljs-number">20</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_stack</span><span class="hljs-params">(PSTACK,<span class="hljs-keyword">int</span>)</span></span>;<br> <span class="hljs-number">21</span> <span class="hljs-comment">//出栈</span><br> <span class="hljs-number">22</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pop_stack</span><span class="hljs-params">(PSTACK)</span></span>;<br> <span class="hljs-number">23</span> <span class="hljs-comment">//遍历栈</span><br> <span class="hljs-number">24</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse_stack</span><span class="hljs-params">(PSTACK)</span></span>;<br> <span class="hljs-number">25</span> <span class="hljs-comment">//判断栈是否为空</span><br> <span class="hljs-number">26</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(PSTACK)</span></span>;<br> <span class="hljs-number">27</span> <span class="hljs-comment">//清空栈</span><br> <span class="hljs-number">28</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(PSTACK)</span></span>;<br> <span class="hljs-number">29</span> <br> <span class="hljs-number">30</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 31 </span>&#123;<br> <span class="hljs-number">32</span>     <span class="hljs-keyword">int</span> val;<span class="hljs-comment">//出栈的值</span><br> <span class="hljs-number">33</span>     STACK s;<br> <span class="hljs-number">34</span>     init_stack(&amp;s);<span class="hljs-comment">//目的是造出一个空栈</span><br> <span class="hljs-number">35</span>     push_stack(&amp;s,<span class="hljs-number">1</span>);<span class="hljs-comment">//压栈</span><br> <span class="hljs-number">36</span>     push_stack(&amp;s,<span class="hljs-number">2</span>);<br> <span class="hljs-number">37</span>     push_stack(&amp;s,<span class="hljs-number">3</span>);<br> <span class="hljs-number">38</span>     push_stack(&amp;s,<span class="hljs-number">4</span>);<br> <span class="hljs-number">39</span>     push_stack(&amp;s,<span class="hljs-number">5</span>);<br> <span class="hljs-number">40</span>     traverse_stack(&amp;s);<br> <span class="hljs-number">41</span>     pop_stack(&amp;s,&amp;val);<br> <span class="hljs-number">42</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> <span class="hljs-number">43</span> &#125;<br> <span class="hljs-number">44</span> <br> <span class="hljs-number">45</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init_stack</span><span class="hljs-params">(PSTACK pS)</span></span><br><span class="hljs-function"> 46 </span>&#123;<br> <span class="hljs-number">47</span>     pS-&gt;pTop=(PNODE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(NODE));<br> <span class="hljs-number">48</span>     <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pS-&gt;pTop)<br> <span class="hljs-number">49</span>     &#123;<br> <span class="hljs-number">50</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配内存失败，程序终止！\n&quot;</span>);<br> <span class="hljs-number">51</span>         <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br> <span class="hljs-number">52</span>     &#125;<br> <span class="hljs-number">53</span>     <span class="hljs-keyword">else</span> <br> <span class="hljs-number">54</span>     &#123;<br> <span class="hljs-number">55</span>         pS-&gt;pBottom = pS-&gt;pTop;<br> <span class="hljs-number">56</span>         pS-&gt;pTop-&gt;pNext = <span class="hljs-literal">NULL</span>;<br> <span class="hljs-number">57</span>     &#125;<br> <span class="hljs-number">58</span>     <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">59</span> &#125;<br> <span class="hljs-number">60</span> <br> <span class="hljs-number">61</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_stack</span><span class="hljs-params">(PSTACK pS,<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"> 62 </span>&#123;<br> <span class="hljs-number">63</span>     PNODE pNew = (PNODE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(NODE));<br> <span class="hljs-number">64</span>     <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pNew)<br> <span class="hljs-number">65</span>     &#123;<br> <span class="hljs-number">66</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配内存失败，程序终止！\n&quot;</span>);<br> <span class="hljs-number">67</span>         <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br> <span class="hljs-number">68</span>     &#125;<br> <span class="hljs-number">69</span>     pNew-&gt;data = val;<br> <span class="hljs-number">70</span>     pNew-&gt;pNext = pS-&gt;pTop;<br> <span class="hljs-number">71</span>     pS-&gt;pTop = pNew;<br> <span class="hljs-number">72</span>     <br> <span class="hljs-number">73</span>     <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">74</span> &#125;<br> <span class="hljs-number">75</span> <br> <span class="hljs-number">76</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse_stack</span><span class="hljs-params">(PSTACK pS)</span></span><br><span class="hljs-function"> 77 </span>&#123;<br> <span class="hljs-number">78</span>     <br> <span class="hljs-number">79</span>     PNODE p = pS-&gt;pTop;<br> <span class="hljs-number">80</span>     <span class="hljs-keyword">while</span> (p != ps-&gt;pBottom) <br> <span class="hljs-number">81</span>     &#123;<br> <span class="hljs-number">82</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\t&quot;</span>,p-&gt;data);<br> <span class="hljs-number">83</span>         p = p-&gt;pNext;<br> <span class="hljs-number">84</span>     &#125;<br> <span class="hljs-number">85</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br> <span class="hljs-number">86</span>     <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">87</span> &#125;<br> <span class="hljs-number">88</span> <br> <span class="hljs-number">89</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(PSTACK pS)</span></span><br><span class="hljs-function"> 90 </span>&#123;<br> <span class="hljs-number">91</span>     <span class="hljs-keyword">if</span> (pS-&gt;pTop == pS-&gt;pBottom)<br> <span class="hljs-number">92</span>         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br> <span class="hljs-number">93</span>     <span class="hljs-keyword">else</span> <br> <span class="hljs-number">94</span>         <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br> <span class="hljs-number">95</span> &#125;<br> <span class="hljs-number">96</span> <br> <span class="hljs-number">97</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">pop_stack</span><span class="hljs-params">(PSTACK pS,*pVal)</span></span><br><span class="hljs-function"> 98 </span>&#123;<br> <span class="hljs-number">99</span>     <span class="hljs-keyword">if</span> (is_empty(pS))&#123;<br><span class="hljs-number">100</span>         <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-number">101</span>     &#125;<br><span class="hljs-number">102</span>     <span class="hljs-keyword">else</span> <br><span class="hljs-number">103</span>     &#123;<br><span class="hljs-number">104</span>         PNODE p = pS-&gt;pTop;<br><span class="hljs-number">105</span>         *pVal = p-&gt;data;<br><span class="hljs-number">106</span>         pS-&gt;pTop = p-&gt;pNext;<br><span class="hljs-number">107</span>         <span class="hljs-built_in">free</span>(p);<br><span class="hljs-number">108</span>         p = <span class="hljs-literal">NULL</span>;<br><span class="hljs-number">109</span>         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-number">110</span>     &#125;<br><span class="hljs-number">111</span> &#125;<br><span class="hljs-number">112</span> <br><span class="hljs-number">113</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(PSTACK pS)</span></span><br><span class="hljs-function">114 </span>&#123;<br><span class="hljs-number">115</span>     <span class="hljs-keyword">if</span>(is_empty(pS))<br><span class="hljs-number">116</span>         <span class="hljs-keyword">return</span>;<br><span class="hljs-number">117</span>     <span class="hljs-keyword">else</span> <br><span class="hljs-number">118</span>     &#123;<br><span class="hljs-number">119</span>         PNODE p = pS-&gt;pTop;<br><span class="hljs-number">120</span>         PNODE q = <span class="hljs-literal">NULL</span>;<br><span class="hljs-number">121</span>         <span class="hljs-keyword">if</span>(p != pS-&gt;pBottom)<br><span class="hljs-number">122</span>         &#123;<br><span class="hljs-number">123</span> q = p-&gt;pNext;<br><span class="hljs-number">124</span> <span class="hljs-built_in">free</span>(p);<br><span class="hljs-number">125</span> p = q;<br><span class="hljs-number">126</span>     &#125;<br><span class="hljs-number">127</span> pS-&gt;pTop = pS-&gt;pBottom;<br><span class="hljs-number">128</span>     &#125;<br><span class="hljs-number">129</span> <span class="hljs-comment">/*此种方法待验证</span><br><span class="hljs-comment">130 while (!is_empty(pS)) </span><br><span class="hljs-comment">131 &#123;</span><br><span class="hljs-comment">132 PNODE p = pS-&gt;pTop;</span><br><span class="hljs-comment">133 pS-&gt;pTop = p-&gt;pNext;</span><br><span class="hljs-comment">134 free(p);</span><br><span class="hljs-comment">135 p=NULL;</span><br><span class="hljs-comment">136 &#125;</span><br><span class="hljs-comment">137 */</span><br><span class="hljs-number">138</span> <span class="hljs-keyword">return</span>;<br><span class="hljs-number">139</span> &#125;<br></code></pre></td></tr></table></figure></blockquote></li><li><h4 id="线性结构的两种常见应用之二：队列"><a href="#线性结构的两种常见应用之二：队列" class="headerlink" title="线性结构的两种常见应用之二：队列"></a>线性结构的两种常见应用之二：队列</h4><ul><li><p>定义：一种可以实现“先进先出”的存储结构</p></li><li><p>分类</p><ul><li><p>链式队列——用链表实现</p></li><li><p>静态队列——用数组实现</p><ol><li><p>静态队列通常都必须是循环队列</p></li><li><p>循环队列的讲解</p><ul><li><p>静态队列为什么必须是循环队列</p></li><li><p>循环队列需要几个参数来确定</p><blockquote><p>需要两个参数来确定队列，front|rear；</p></blockquote></li><li><p>循环队列各个参数的含义</p><blockquote><ol><li>队列初始化：front和rear的值都是0</li><li>队列非空：front代表的是队列的第一个元素，rear代表的是队列的最后一个有效元素的下一个位置</li><li>队列空：front和rear的值相等，但不一定是0</li></ol></blockquote></li><li><p>循环队列入队伪算法</p><blockquote><ol><li>将值存入rear所代表的位置</li><li>rear = （rear + 1） % 数组的长度</li></ol></blockquote></li><li><p>循环队列出队伪算法</p><blockquote><ol><li>front = (front + 1) % 数组的长度</li></ol></blockquote></li><li><p>如何判断循环队列是否为空</p><blockquote><p>if (front == rear)</p></blockquote></li><li><p>如何判断循环队列是否已满</p><blockquote><p>两种方式：</p><ol><li>if ((rear + 1 % 数组的长度) == front)</li><li>元素个数=数组长度-1</li></ol></blockquote></li></ul></li><li><p>队列的具体应用：<strong>所有和时间有关的操作都与队列有关</strong></p><blockquote><p>样例代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre class=" language-hljs c">  <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br>  <span class="hljs-number">2</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br>  <span class="hljs-number">3</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdboo.h&gt;</span></span><br>  <span class="hljs-number">4</span> <br>  <span class="hljs-number">5</span> <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Queue</span></span><br><span class="hljs-class">  6 &#123;</span><br>  <span class="hljs-number">7</span> <span class="hljs-keyword">int</span> * pBase;<span class="hljs-comment">//循环数组的首地址</span><br>  <span class="hljs-number">8</span> <span class="hljs-keyword">int</span> front;<span class="hljs-comment">//队头</span><br>  <span class="hljs-number">9</span> <span class="hljs-keyword">int</span> rear;<span class="hljs-comment">//队尾</span><br> <span class="hljs-number">10</span> &#125;QUEUE;<br> <span class="hljs-number">11</span> <br> <span class="hljs-number">12</span> <span class="hljs-comment">//初始化队列</span><br> <span class="hljs-number">13</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(QUEUE *)</span></span>;<br> <span class="hljs-number">14</span> <span class="hljs-comment">//判断队列是否为空</span><br> <span class="hljs-number">15</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(QUEUE *)</span></span>;<br> <span class="hljs-number">16</span> <span class="hljs-comment">//队列是否已满</span><br> <span class="hljs-number">17</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_full</span><span class="hljs-params">(QUEUE *)</span></span>;<br> <span class="hljs-number">18</span> <span class="hljs-comment">//插入队列 入队</span><br> <span class="hljs-number">19</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">en_queue</span><span class="hljs-params">(QUEUE *,<span class="hljs-keyword">int</span> val)</span></span>;<br> <span class="hljs-number">20</span> <span class="hljs-comment">//遍历队列</span><br> <span class="hljs-number">21</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse_queue</span><span class="hljs-params">(QUEUE *)</span></span>;<br> <span class="hljs-number">22</span> <span class="hljs-comment">//出队</span><br> <span class="hljs-number">23</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">out_queue</span><span class="hljs-params">(QUEUE *,<span class="hljs-keyword">int</span> *)</span></span>;<br> <span class="hljs-number">24</span> <br> <span class="hljs-number">25</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 26 </span>&#123;<br> <span class="hljs-number">27</span>  <span class="hljs-keyword">int</span> val;<span class="hljs-comment">//出队的元素</span><br> <span class="hljs-number">28</span>  QUEUE Q;<br> <span class="hljs-number">29</span>  init(&amp;Q);<br> <span class="hljs-number">30</span>  en_queue(&amp;Q,<span class="hljs-number">1</span>);<br> <span class="hljs-number">31</span>  en_queue(&amp;Q,<span class="hljs-number">2</span>);<br> <span class="hljs-number">32</span>  en_queue(&amp;Q,<span class="hljs-number">3</span>);<br> <span class="hljs-number">33</span>  en_queue(&amp;Q,<span class="hljs-number">4</span>);<br> <span class="hljs-number">34</span>  en_queue(&amp;Q,<span class="hljs-number">5</span>);<br> <span class="hljs-number">35</span>  en_queue(&amp;Q,<span class="hljs-number">6</span>);<br> <span class="hljs-number">36</span>  traverse_queue(&amp;Q);<br> <span class="hljs-number">37</span>  <span class="hljs-keyword">if</span>(out_queue(&amp;Q,&amp;val))<br> <span class="hljs-number">38</span>  &#123;<br> <span class="hljs-number">39</span>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The elem out queue is %d .&quot;</span>,val);<br> <span class="hljs-number">40</span>  &#125;<br> <span class="hljs-number">41</span>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> <span class="hljs-number">42</span> &#125;<br> <span class="hljs-number">43</span> <br> <span class="hljs-number">44</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(QUEUE * pQ)</span></span><br><span class="hljs-function"> 45 </span>&#123;<br> <span class="hljs-number">46</span>  pQ-&gt;pBase = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) * <span class="hljs-number">6</span>);<br> <span class="hljs-number">47</span>  pQ-&gt;front = <span class="hljs-number">0</span>;<br> <span class="hljs-number">48</span>  pQ-&gt;rear = <span class="hljs-number">0</span>;<br> <span class="hljs-number">49</span> &#125;<br> <span class="hljs-number">50</span> <br> <span class="hljs-number">51</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(QUEUE * pQ)</span></span><br><span class="hljs-function"> 52 </span>&#123;<br> <span class="hljs-number">53</span>  <span class="hljs-keyword">return</span> pQ-&gt;front == pQ-&gt;rear? <span class="hljs-literal">true</span>:<span class="hljs-literal">false</span>;<br> <span class="hljs-number">54</span> &#125;<br> <span class="hljs-number">55</span> <br> <span class="hljs-number">56</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_full</span><span class="hljs-params">(QUEUE * pQ)</span></span><br><span class="hljs-function"> 57 </span>&#123;<br> <span class="hljs-number">58</span>  <span class="hljs-keyword">return</span> pQ-&gt;front == (pQ-&gt;rear + <span class="hljs-number">1</span>) % <span class="hljs-number">6</span> ? <span class="hljs-literal">true</span>:<span class="hljs-literal">false</span>;<br> <span class="hljs-number">59</span> &#125;<br> <span class="hljs-number">60</span> <br> <span class="hljs-number">61</span> <span class="hljs-comment">//入队</span><br> <span class="hljs-number">62</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">en_queue</span><span class="hljs-params">(QUEUE * pQ,<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"> 63 </span>&#123;<br> <span class="hljs-number">64</span>  <span class="hljs-keyword">if</span>(is_full(pQ))<br> <span class="hljs-number">65</span>     <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br> <span class="hljs-number">66</span>  <span class="hljs-keyword">else</span><br> <span class="hljs-number">67</span>  &#123;<br> <span class="hljs-number">68</span>      pQ-&gt;pBase[pQ-&gt;rear] = val;<br> <span class="hljs-number">69</span>      pQ-&gt;rear = (pQ-&gt;rear + <span class="hljs-number">1</span>) % <span class="hljs-number">6</span>;<br> <span class="hljs-number">70</span>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br> <span class="hljs-number">71</span>  &#125;<br> <span class="hljs-number">72</span>  <br> <span class="hljs-number">73</span> &#125;<br> <span class="hljs-number">74</span> <br> <span class="hljs-number">75</span> <span class="hljs-comment">//遍历队列</span><br> <span class="hljs-number">76</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse_queue</span><span class="hljs-params">(QUEUE * pQ)</span></span><br><span class="hljs-function"> 77 </span>&#123;<br> <span class="hljs-number">78</span>     <span class="hljs-keyword">if</span>(is_empty(pQ))<br> <span class="hljs-number">79</span>  &#123;<br> <span class="hljs-number">80</span>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The queue is empty!&quot;</span>);<br> <span class="hljs-number">81</span>      <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">82</span>  &#125;<br> <span class="hljs-number">83</span>  <span class="hljs-keyword">else</span><br> <span class="hljs-number">84</span>  &#123;<br> <span class="hljs-number">85</span>      <span class="hljs-keyword">int</span> val;<br> <span class="hljs-number">86</span>      <span class="hljs-keyword">while</span>(pQ-&gt;front != pQ-&gt;rear)<br> <span class="hljs-number">87</span>      &#123;<br> <span class="hljs-number">88</span>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,pQ-&gt;pBase[pQ-&gt;front]);<br> <span class="hljs-number">89</span>          pQ-&gt;front = (pQ-&gt;front + <span class="hljs-number">1</span>) % <span class="hljs-number">6</span>;<br> <span class="hljs-number">90</span>      &#125;<br> <span class="hljs-number">91</span>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br> <span class="hljs-number">92</span>      <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">93</span>  &#125;<br> <span class="hljs-number">94</span> &#125;    <br> <span class="hljs-number">95</span> <br> <span class="hljs-number">96</span> <span class="hljs-comment">//出队</span><br> <span class="hljs-number">97</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">out_queue</span><span class="hljs-params">(QUEUE * pQ,<span class="hljs-keyword">int</span> *pVal)</span></span><br><span class="hljs-function"> 98 </span>&#123;<br> <span class="hljs-number">99</span>  <span class="hljs-keyword">if</span>(is_empty(pQ))<br><span class="hljs-number">100</span>  &#123;<br><span class="hljs-number">101</span>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The queue is empty.&quot;</span>);<br><span class="hljs-number">102</span>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-number">103</span>  &#125;<br><span class="hljs-number">104</span>  <span class="hljs-keyword">else</span><br><span class="hljs-number">105</span>  &#123;<br><span class="hljs-number">106</span>      *pVal = pQ-&gt;pBase[pQ-&gt;front];<br><span class="hljs-number">107</span>      pQ-&gt;front = (pQ-&gt;front + <span class="hljs-number">1</span>) % <span class="hljs-number">6</span>;<br><span class="hljs-number">108</span>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-number">109</span>  &#125;<br><span class="hljs-number"><code class="language-hljs c">  <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br>  <span class="hljs-number">2</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br>  <span class="hljs-number">3</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdboo.h&gt;</span></span><br>  <span class="hljs-number">4</span> <br>  <span class="hljs-number">5</span> <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Queue</span></span><br><span class="hljs-class">  6 &#123;</span><br>  <span class="hljs-number">7</span> <span class="hljs-keyword">int</span> * pBase;<span class="hljs-comment">//循环数组的首地址</span><br>  <span class="hljs-number">8</span> <span class="hljs-keyword">int</span> front;<span class="hljs-comment">//队头</span><br>  <span class="hljs-number">9</span> <span class="hljs-keyword">int</span> rear;<span class="hljs-comment">//队尾</span><br> <span class="hljs-number">10</span> &#125;QUEUE;<br> <span class="hljs-number">11</span> <br> <span class="hljs-number">12</span> <span class="hljs-comment">//初始化队列</span><br> <span class="hljs-number">13</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(QUEUE *)</span></span>;<br> <span class="hljs-number">14</span> <span class="hljs-comment">//判断队列是否为空</span><br> <span class="hljs-number">15</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(QUEUE *)</span></span>;<br> <span class="hljs-number">16</span> <span class="hljs-comment">//队列是否已满</span><br> <span class="hljs-number">17</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_full</span><span class="hljs-params">(QUEUE *)</span></span>;<br> <span class="hljs-number">18</span> <span class="hljs-comment">//插入队列 入队</span><br> <span class="hljs-number">19</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">en_queue</span><span class="hljs-params">(QUEUE *,<span class="hljs-keyword">int</span> val)</span></span>;<br> <span class="hljs-number">20</span> <span class="hljs-comment">//遍历队列</span><br> <span class="hljs-number">21</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse_queue</span><span class="hljs-params">(QUEUE *)</span></span>;<br> <span class="hljs-number">22</span> <span class="hljs-comment">//出队</span><br> <span class="hljs-number">23</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">out_queue</span><span class="hljs-params">(QUEUE *,<span class="hljs-keyword">int</span> *)</span></span>;<br> <span class="hljs-number">24</span> <br> <span class="hljs-number">25</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 26 </span>&#123;<br> <span class="hljs-number">27</span>  <span class="hljs-keyword">int</span> val;<span class="hljs-comment">//出队的元素</span><br> <span class="hljs-number">28</span>  QUEUE Q;<br> <span class="hljs-number">29</span>  init(&amp;Q);<br> <span class="hljs-number">30</span>  en_queue(&amp;Q,<span class="hljs-number">1</span>);<br> <span class="hljs-number">31</span>  en_queue(&amp;Q,<span class="hljs-number">2</span>);<br> <span class="hljs-number">32</span>  en_queue(&amp;Q,<span class="hljs-number">3</span>);<br> <span class="hljs-number">33</span>  en_queue(&amp;Q,<span class="hljs-number">4</span>);<br> <span class="hljs-number">34</span>  en_queue(&amp;Q,<span class="hljs-number">5</span>);<br> <span class="hljs-number">35</span>  en_queue(&amp;Q,<span class="hljs-number">6</span>);<br> <span class="hljs-number">36</span>  traverse_queue(&amp;Q);<br> <span class="hljs-number">37</span>  <span class="hljs-keyword">if</span>(out_queue(&amp;Q,&amp;val))<br> <span class="hljs-number">38</span>  &#123;<br> <span class="hljs-number">39</span>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The elem out queue is %d .&quot;</span>,val);<br> <span class="hljs-number">40</span>  &#125;<br> <span class="hljs-number">41</span>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> <span class="hljs-number">42</span> &#125;<br> <span class="hljs-number">43</span> <br> <span class="hljs-number">44</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(QUEUE * pQ)</span></span><br><span class="hljs-function"> 45 </span>&#123;<br> <span class="hljs-number">46</span>  pQ-&gt;pBase = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) * <span class="hljs-number">6</span>);<br> <span class="hljs-number">47</span>  pQ-&gt;front = <span class="hljs-number">0</span>;<br> <span class="hljs-number">48</span>  pQ-&gt;rear = <span class="hljs-number">0</span>;<br> <span class="hljs-number">49</span> &#125;<br> <span class="hljs-number">50</span> <br> <span class="hljs-number">51</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(QUEUE * pQ)</span></span><br><span class="hljs-function"> 52 </span>&#123;<br> <span class="hljs-number">53</span>  <span class="hljs-keyword">return</span> pQ-&gt;front == pQ-&gt;rear? <span class="hljs-literal">true</span>:<span class="hljs-literal">false</span>;<br> <span class="hljs-number">54</span> &#125;<br> <span class="hljs-number">55</span> <br> <span class="hljs-number">56</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_full</span><span class="hljs-params">(QUEUE * pQ)</span></span><br><span class="hljs-function"> 57 </span>&#123;<br> <span class="hljs-number">58</span>  <span class="hljs-keyword">return</span> pQ-&gt;front == (pQ-&gt;rear + <span class="hljs-number">1</span>) % <span class="hljs-number">6</span> ? <span class="hljs-literal">true</span>:<span class="hljs-literal">false</span>;<br> <span class="hljs-number">59</span> &#125;<br> <span class="hljs-number">60</span> <br> <span class="hljs-number">61</span> <span class="hljs-comment">//入队</span><br> <span class="hljs-number">62</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">en_queue</span><span class="hljs-params">(QUEUE * pQ,<span class="hljs-keyword">int</span> val)</span></span><br><span class="hljs-function"> 63 </span>&#123;<br> <span class="hljs-number">64</span>  <span class="hljs-keyword">if</span>(is_full(pQ))<br> <span class="hljs-number">65</span>     <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br> <span class="hljs-number">66</span>  <span class="hljs-keyword">else</span><br> <span class="hljs-number">67</span>  &#123;<br> <span class="hljs-number">68</span>      pQ-&gt;pBase[pQ-&gt;rear] = val;<br> <span class="hljs-number">69</span>      pQ-&gt;rear = (pQ-&gt;rear + <span class="hljs-number">1</span>) % <span class="hljs-number">6</span>;<br> <span class="hljs-number">70</span>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br> <span class="hljs-number">71</span>  &#125;<br> <span class="hljs-number">72</span>  <br> <span class="hljs-number">73</span> &#125;<br> <span class="hljs-number">74</span> <br> <span class="hljs-number">75</span> <span class="hljs-comment">//遍历队列</span><br> <span class="hljs-number">76</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse_queue</span><span class="hljs-params">(QUEUE * pQ)</span></span><br><span class="hljs-function"> 77 </span>&#123;<br> <span class="hljs-number">78</span>     <span class="hljs-keyword">if</span>(is_empty(pQ))<br> <span class="hljs-number">79</span>  &#123;<br> <span class="hljs-number">80</span>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The queue is empty!&quot;</span>);<br> <span class="hljs-number">81</span>      <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">82</span>  &#125;<br> <span class="hljs-number">83</span>  <span class="hljs-keyword">else</span><br> <span class="hljs-number">84</span>  &#123;<br> <span class="hljs-number">85</span>      <span class="hljs-keyword">int</span> val;<br> <span class="hljs-number">86</span>      <span class="hljs-keyword">while</span>(pQ-&gt;front != pQ-&gt;rear)<br> <span class="hljs-number">87</span>      &#123;<br> <span class="hljs-number">88</span>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,pQ-&gt;pBase[pQ-&gt;front]);<br> <span class="hljs-number">89</span>          pQ-&gt;front = (pQ-&gt;front + <span class="hljs-number">1</span>) % <span class="hljs-number">6</span>;<br> <span class="hljs-number">90</span>      &#125;<br> <span class="hljs-number">91</span>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br> <span class="hljs-number">92</span>      <span class="hljs-keyword">return</span>;<br> <span class="hljs-number">93</span>  &#125;<br> <span class="hljs-number">94</span> &#125;    <br> <span class="hljs-number">95</span> <br> <span class="hljs-number">96</span> <span class="hljs-comment">//出队</span><br> <span class="hljs-number">97</span> <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">out_queue</span><span class="hljs-params">(QUEUE * pQ,<span class="hljs-keyword">int</span> *pVal)</span></span><br><span class="hljs-function"> 98 </span>&#123;<br> <span class="hljs-number">99</span>  <span class="hljs-keyword">if</span>(is_empty(pQ))<br><span class="hljs-number">100</span>  &#123;<br><span class="hljs-number">101</span>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The queue is empty.&quot;</span>);<br><span class="hljs-number">102</span>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-number">103</span>  &#125;<br><span class="hljs-number">104</span>  <span class="hljs-keyword">else</span><br><span class="hljs-number">105</span>  &#123;<br><span class="hljs-number">106</span>      *pVal = pQ-&gt;pBase[pQ-&gt;front];<br><span class="hljs-number">107</span>      pQ-&gt;front = (pQ-&gt;front + <span class="hljs-number">1</span>) % <span class="hljs-number">6</span>;<br><span class="hljs-number">108</span>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-number">109</span>  &#125;<br><span class="hljs-number">110</span> &#125; <br></code></pre></td></tr></table></figure></blockquote></li></ol></li></ul></li></ul></li></ul><h4 id="主题：递归"><a href="#主题：递归" class="headerlink" title="主题：递归"></a>主题：递归</h4><blockquote><p>定义：一个函数自己直接或间接调用自己</p><p>递归满足三个条件</p><ol><li>递归必须得有一个明确的中止条件</li><li>该函数所处理的数据规模必须在递减</li><li>这个转化必须是可解的</li></ol><p>循环和递归</p><ul><li>递归<ul><li>易于理解</li><li>速度慢</li><li>存储空间大</li></ul></li><li>循环<ul><li>不易理解</li><li>速度快</li><li>存储空间小</li></ul></li></ul><p>函数的调用：</p><ul><li>当在一个函数的运行期间调用另一个函数时，在运行被调函数之前，系统需要完成三件事：<ol><li>将所有的实际参数、返回地址等信息传递给被调函数保存。</li><li>为被调函数的局部变量（也包括行参）分配存储空间。</li><li>将控制转移到被调函数的入口。</li></ol></li><li>从被调函数返回函数之前，系统也要完成三件事：<ol><li>保存被调函数的返回结果。</li><li>释放被调函数所占的存储空间。</li><li>依照被调函数保存的返回地址将控制转移到调用函数。</li></ol></li><li>当有多个函数相互调用时，按照”后调用先返回“的原则，上述函数之间信息传递和控制转移必须借助”栈“来实现，即系统将整个程序运行时所需的数据空间安排在一个栈中，每当调用一个函数时，就在栈顶分配一个存储区，进行压栈操作，每当一个函数退出时，就释放它的存储区，就做出栈操作，当前运行的函数永远都在栈顶位置。</li><li>A函数调用A函数和A函数调用B函数在计算机看来是没有任何区别的，只不过用我们日常的思维方式理解比较怪异而已！</li></ul></blockquote><ol><li><p>1+2+3+…+100的和</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs c"><code class="language-hljs c">代码实现<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre class=" language-hljs c"> <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-number">2</span> <br> <span class="hljs-number">3</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;<br> <span class="hljs-number">4</span> <br> <span class="hljs-number">5</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 6 </span>&#123;<br> <span class="hljs-number">7</span>     <span class="hljs-keyword">int</span> n = <span class="hljs-number">100</span>;<br> <span class="hljs-number">8</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,sum(n));<br> <span class="hljs-number">9</span>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">10</span> &#125;<br><span class="hljs-number">11</span> <br><span class="hljs-number">12</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function">13 </span>&#123;<br><span class="hljs-number">14</span>  <span class="hljs-keyword">if</span>(<span class="hljs-number">1</span> == n)<br><span class="hljs-number">15</span>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-number">16</span>  <span class="hljs-keyword">else</span><br><span class="hljs-number">17</span>      <span class="hljs-keyword">return</span> n + sum(n<span class="hljs-number">-1</span>);<br><span class="hljs-number"><code class="language-hljs c"> <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-number">2</span> <br> <span class="hljs-number">3</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span>;<br> <span class="hljs-number">4</span> <br> <span class="hljs-number">5</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 6 </span>&#123;<br> <span class="hljs-number">7</span>     <span class="hljs-keyword">int</span> n = <span class="hljs-number">100</span>;<br> <span class="hljs-number">8</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,sum(n));<br> <span class="hljs-number">9</span>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">10</span> &#125;<br><span class="hljs-number">11</span> <br><span class="hljs-number">12</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function">13 </span>&#123;<br><span class="hljs-number">14</span>  <span class="hljs-keyword">if</span>(<span class="hljs-number">1</span> == n)<br><span class="hljs-number">15</span>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-number">16</span>  <span class="hljs-keyword">else</span><br><span class="hljs-number">17</span>      <span class="hljs-keyword">return</span> n + sum(n<span class="hljs-number">-1</span>);<br><span class="hljs-number">18</span> &#125; <br></code></pre></td></tr></table></figure></blockquote></li><li><p>求阶乘</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs c"><code class="language-hljs c">代码实现<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class=" language-hljs c#"> <span class="hljs-number">1</span> <span class="hljs-meta"># include &lt;stdio.h&gt;</span><br> <span class="hljs-number">2</span> <br> <span class="hljs-number">3</span> <span class="hljs-function"><span class="hljs-built_in">long</span> <span class="hljs-title">multi</span>(<span class="hljs-params"><span class="hljs-built_in">int</span></span>)</span>;<br> <span class="hljs-number">4</span> <br> <span class="hljs-number">5</span> <span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)</span><br><span class="hljs-function"> 6</span> &#123;<br> <span class="hljs-number">7</span>     printf(<span class="hljs-string">&quot;%ld\n&quot;</span>,multi(<span class="hljs-number">6</span>));<br> <span class="hljs-number">8</span>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> <span class="hljs-number">9</span> &#125; <br><span class="hljs-number">10</span> <br><span class="hljs-number">11</span> <span class="hljs-function"><span class="hljs-built_in">long</span> <span class="hljs-title">multi</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> n</span>)</span><br><span class="hljs-function">12</span> &#123;<br><span class="hljs-number">13</span>  <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == n)<br><span class="hljs-number">14</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-number">15</span>  <span class="hljs-keyword">else</span><br><span class="hljs-number">16</span>     <span class="hljs-keyword">return</span> n * multi(n - <span class="hljs-number">1</span>);<br><span class="hljs-number"><code class="language-hljs c#"> <span class="hljs-number">1</span> <span class="hljs-meta"># include &lt;stdio.h&gt;</span><br> <span class="hljs-number">2</span> <br> <span class="hljs-number">3</span> <span class="hljs-function"><span class="hljs-built_in">long</span> <span class="hljs-title">multi</span>(<span class="hljs-params"><span class="hljs-built_in">int</span></span>)</span>;<br> <span class="hljs-number">4</span> <br> <span class="hljs-number">5</span> <span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)</span><br><span class="hljs-function"> 6</span> &#123;<br> <span class="hljs-number">7</span>     printf(<span class="hljs-string">&quot;%ld\n&quot;</span>,multi(<span class="hljs-number">6</span>));<br> <span class="hljs-number">8</span>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> <span class="hljs-number">9</span> &#125; <br><span class="hljs-number">10</span> <br><span class="hljs-number">11</span> <span class="hljs-function"><span class="hljs-built_in">long</span> <span class="hljs-title">multi</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> n</span>)</span><br><span class="hljs-function">12</span> &#123;<br><span class="hljs-number">13</span>  <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == n)<br><span class="hljs-number">14</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-number">15</span>  <span class="hljs-keyword">else</span><br><span class="hljs-number">16</span>     <span class="hljs-keyword">return</span> n * multi(n - <span class="hljs-number">1</span>);<br><span class="hljs-number">17</span> &#125;<br></code></pre></td></tr></table></figure></blockquote></li><li><p>汉诺塔</p><blockquote><p>伪代码：</p><p>如果只有一个盘子：</p><p>直接将盘子从A柱子移到C柱子</p><p>否则：</p><p>先将A柱子上的n-1个盘子借助C柱子移到B柱子</p><p>再直接将盘子从A柱子移到C柱子</p><p>最后再将B柱子上的盘子借助A柱子移到C柱子上</p><p>代码实现样例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre class=" language-hljs c"> <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-number">2</span> <br> <span class="hljs-number">3</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">hanoi</span><span class="hljs-params">(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">char</span>,<span class="hljs-keyword">char</span>,<span class="hljs-keyword">char</span>)</span></span>;<br> <span class="hljs-number">4</span> <br> <span class="hljs-number">5</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 6 </span>&#123;<br> <span class="hljs-number">7</span>     <span class="hljs-comment">//柱子编号</span><br> <span class="hljs-number">8</span>     <span class="hljs-keyword">char</span> ch1 = <span class="hljs-string">&#x27;A&#x27;</span>;<br> <span class="hljs-number">9</span>     <span class="hljs-keyword">char</span> ch2 = <span class="hljs-string">&#x27;B&#x27;</span>;<br><span class="hljs-number">10</span>     <span class="hljs-keyword">char</span> ch3 = <span class="hljs-string">&#x27;C&#x27;</span>;<br><span class="hljs-number">11</span>     <span class="hljs-comment">//盘子数量</span><br><span class="hljs-number">12</span>     <span class="hljs-keyword">int</span> n;<br><span class="hljs-number">13</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入盘子的数量&quot;</span>);<br><span class="hljs-number">14</span>     <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-number">15</span>     hanoi(n,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>);<br><span class="hljs-number">16</span>     <br><span class="hljs-number">17</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">18</span> &#125;<br><span class="hljs-number">19</span> <br><span class="hljs-number">20</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">hanoi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">char</span> <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-keyword">char</span> <span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-keyword">char</span> <span class="hljs-string">&#x27;C&#x27;</span>)</span></span><br><span class="hljs-function">21 </span>&#123;<br><span class="hljs-number">22</span>     <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == n)<br><span class="hljs-number">23</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;编号为%d的盘子：%c--&gt;%c\n&quot;</span>,n,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&quot;C&quot;</span>);<br><span class="hljs-number">24</span>     <span class="hljs-keyword">else</span><br><span class="hljs-number">25</span>     &#123;<br><span class="hljs-number">26</span>         hanoi(n<span class="hljs-number">-1</span>,A,C,B);<br><span class="hljs-number">27</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;编号为%d的盘子：%c--&gt;%c\n&quot;</span>,n,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&quot;C&quot;</span>);<br><span class="hljs-number">28</span>         hanoi(n<span class="hljs-number">-1</span>,B,A,C);<br><span class="hljs-number">29</span>     &#125;<br><span class="hljs-number"><code class="language-hljs c"> <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-number">2</span> <br> <span class="hljs-number">3</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">hanoi</span><span class="hljs-params">(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">char</span>,<span class="hljs-keyword">char</span>,<span class="hljs-keyword">char</span>)</span></span>;<br> <span class="hljs-number">4</span> <br> <span class="hljs-number">5</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 6 </span>&#123;<br> <span class="hljs-number">7</span>     <span class="hljs-comment">//柱子编号</span><br> <span class="hljs-number">8</span>     <span class="hljs-keyword">char</span> ch1 = <span class="hljs-string">&#x27;A&#x27;</span>;<br> <span class="hljs-number">9</span>     <span class="hljs-keyword">char</span> ch2 = <span class="hljs-string">&#x27;B&#x27;</span>;<br><span class="hljs-number">10</span>     <span class="hljs-keyword">char</span> ch3 = <span class="hljs-string">&#x27;C&#x27;</span>;<br><span class="hljs-number">11</span>     <span class="hljs-comment">//盘子数量</span><br><span class="hljs-number">12</span>     <span class="hljs-keyword">int</span> n;<br><span class="hljs-number">13</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入盘子的数量&quot;</span>);<br><span class="hljs-number">14</span>     <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-number">15</span>     hanoi(n,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>);<br><span class="hljs-number">16</span>     <br><span class="hljs-number">17</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">18</span> &#125;<br><span class="hljs-number">19</span> <br><span class="hljs-number">20</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">hanoi</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">char</span> <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-keyword">char</span> <span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-keyword">char</span> <span class="hljs-string">&#x27;C&#x27;</span>)</span></span><br><span class="hljs-function">21 </span>&#123;<br><span class="hljs-number">22</span>     <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == n)<br><span class="hljs-number">23</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;编号为%d的盘子：%c--&gt;%c\n&quot;</span>,n,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&quot;C&quot;</span>);<br><span class="hljs-number">24</span>     <span class="hljs-keyword">else</span><br><span class="hljs-number">25</span>     &#123;<br><span class="hljs-number">26</span>         hanoi(n<span class="hljs-number">-1</span>,A,C,B);<br><span class="hljs-number">27</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;编号为%d的盘子：%c--&gt;%c\n&quot;</span>,n,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&quot;C&quot;</span>);<br><span class="hljs-number">28</span>         hanoi(n<span class="hljs-number">-1</span>,B,A,C);<br><span class="hljs-number">29</span>     &#125;<br><span class="hljs-number">30</span> &#125; <br></code></pre></td></tr></table></figure></blockquote></li><li><p>走迷宫</p><blockquote><p>A*(A-Star)算法实现</p></blockquote></li></ol><h5 id="递归的应用"><a href="#递归的应用" class="headerlink" title="递归的应用"></a>递归的应用</h5><ul><li>树和森林就是以递归的方式定义的</li><li>树和图的很多算法</li><li>很多数学公式：例如斐波拉契数列</li></ul><h2 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构"></a>非线性结构</h2><h4 id="树"><a href="#树" class="headerlink" title="树"></a>树</h4><h5 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h5><ul><li>专业定义：<ol><li>有且只有一个称为根的节点</li><li>有若干个互不相交的子树，这些子树本身也是一颗树</li></ol></li><li>通俗定义：<ol><li>树是由节点和边组成</li><li>每个节点只有一个父节点但可以有多个子节点</li><li>但有一个节点例外，该节点没有父节点，此节点称为根节点</li></ol></li><li>专业术语：<ul><li>节点，父节点，子节点</li><li>子孙，堂兄弟</li><li>深度：从根节点到最底层节点的层数称之为深度，根节点是第一层</li><li>叶子节点：没有子节点的节点</li><li>非终端节点：实际就是非叶子节点</li><li>度：子节点的个数</li></ul></li></ul><h5 id="树的分类"><a href="#树的分类" class="headerlink" title="树的分类"></a>树的分类</h5><ul><li>一般树：任意一个节点的子节点的个数都不受限制</li><li>二叉树：任意一个节点的子节点个数最多两个，且子节点的位置不可更改<ul><li>分类<ul><li>一般二叉树</li><li>满二叉树：在不增加树层数的前提下，无法再多添加一个节点的二叉树就是满二叉树</li><li>完全二叉树：如果只是删除了满二叉树最底层最右边的连续若干个节点，这样形成的二叉树就是完全二叉树。（满二叉树是完全二叉树的一个特例）</li></ul></li></ul></li><li>森林：n个互不相交的树的集合</li></ul><h5 id="树的存储"><a href="#树的存储" class="headerlink" title="树的存储"></a>树的存储</h5><ul><li><p>二叉树的存储</p><ul><li><p>连续存储【完全二叉树】</p><blockquote><p>优点：查找某个节点的父节点和子节点（也包括判断有没有子节点）</p><p>缺点：耗用内存空间过大</p></blockquote></li><li><p>链式存储</p></li></ul></li><li><p>一般树的存储</p><ul><li><p>双亲表示法：求父节点方便</p></li><li><p>孩子表示法：求子节点方便</p></li><li><p>双亲孩子表示法：求父节点和子节点都很方便</p></li><li><p>二叉树表示法：把一个普通树转化成二叉树来存储</p><blockquote><p>具体转换方法：</p><p>设法保证任意一个节点的左指针域指向它的第一个孩子，右指针域指向它的兄弟，只要满足此条件，就可以把一个普通树转化为二叉树。</p><p>一个普通树转化成的二叉树一定没有右子树</p></blockquote></li></ul></li><li><p>森林的存储</p><blockquote><p>先把森林转化为二叉树，再存储二叉树：</p><p>将相邻的父节点依次作为节点的右子树再对各父节点进行转化</p></blockquote></li></ul><h5 id="树的操作"><a href="#树的操作" class="headerlink" title="树的操作"></a>树的操作</h5><ul><li><p>遍历</p><ul><li><p>先序遍历【先访问根节点】</p><blockquote><ol><li><p>先访问根节点</p></li><li><p>再先序访问左子树</p></li><li><p>最后先序访问右子树</p><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs c"><code class="language-hljs c">      A<br>     / \<br>    B   C<br>   / \   \<br>  D   E    F<br> / \   \  / \<br>G   H   I J  k<br></code></pre></td></tr></table></figure><p>先序遍历结果：ABDGHEICFJK</p></li></ol></blockquote></li><li><p>中序遍历【中间访问根节点】</p><blockquote><ol><li><p>中序遍历左子树</p></li><li><p>再访问根节点</p></li><li><p>再中序遍历右子树</p><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs c"><code class="language-hljs c">      A<br>     / \<br>    B   C<br>   / \   \<br>  D   E    F<br> / \   \  / \<br>G   H   I J  k<br></code></pre></td></tr></table></figure><p>中序遍历结果：GDHBEIACJFK</p></li></ol></blockquote></li><li><p>后续遍历【最后访问根节点】</p><blockquote><ol><li><p>先中序遍历左子树</p></li><li><p>再中序遍历右子树</p></li><li><p>最后遍历根节点</p><p>例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class=" language-hljs c"><code class="language-hljs c">      A<br>     / \<br>    B   C<br>   / \   \<br>  D   E    F<br> / \   \  / \<br>G   H   I J  k<br></code></pre></td></tr></table></figure><p>后序遍历结果：GHDIEBJKFCA</p></li></ol></blockquote></li></ul></li><li><p>已知两种遍历序列求原始二叉树</p><blockquote><p>通过先序和中序或者中序和后序我们可以还原出原始二叉树，但是通过先序和后序是无法还原出原始二叉树；</p><p>换句话，只有通过先序和中序或者中序和后序，我们才可以唯一的确定一个二叉树。</p><p>例子1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs c"><code class="language-hljs c">先序：ABCDEFGH<br>中序：BDCEAFHG<br>求后序？<br>分析：按照先序的定义，A为最外层根节点，按照中序的定义和前面的结论可知BDCE为A节点的左子树节点，FHG为A节点的右子树，再依次按照两个遍历定义可以推出原始二叉树为：<br>        A<br>       / \<br>      B   F<br>        \  \<br>         C  G<br>        / \ /<br>       D  E H<br>那么此二叉树的后序为：DECBHGFA<br></code></pre></td></tr></table></figure><p>例子2：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs c"><code class="language-hljs c">先序：ABDGHCEFI<br>中序：GDHBAECIF<br>求后序？<br>分析：按照先序的定义得到A为最外层根节点，再根据中序结果可知GDHB为A的左子树，ECIF为A的右子树；B先出现在先序结果中可知B为左子树的根节点，再根据中序结果知B节点没有右子树，GDH均为B节点的左子树，再根据先序结果D先出现，知D为B左子树的根节点，再根据先序发现G在D的后面且中序中G在D的前面得出G为D左子树的根节点，那么D的右子树的根节点就是H了，依次类推A的右子树，得出原始二叉树为：<br>      A<br>     / \<br>    B   C<br>   /   / \<br>  D   E   F<br> / \     /<br>G   H   I<br>那么此二叉树的后序为：GHDBEIFCA<br></code></pre></td></tr></table></figure><p>例子3：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class=" language-hljs c"><code class="language-hljs c">中序：BDCEAFHG<br>后序：DECBHGFA<br>求先序？<br>分析：由后序结果知A为最外层根节点，再根据中序结果知BDCE为A节点的左子树，FHG为A的右子树；A的左子树中B最靠近A那么根据后序规则得出B为左子树的根节点，再根据中序结果B在结果的第一位，由中序规则知B没有左子树，DCE均为B的右子树，在DCE中后序结果C最靠近B，得出C为B的右子树的根节点，再依据中序结果知C前面是D后面是E得出D为C的左子树，E为C的右子树，同理可以推出A的右子树，得出原始二叉树为：<br>        A<br>       / \<br>      B   F<br>       \   \<br>        C   G<br>       / \  /<br>      D   E H<br>那么此二叉树的先序为：ABCDEFGH<br></code></pre></td></tr></table></figure></blockquote></li><li><p>二叉树的代码实现举例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre class=" language-hljs c">  <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br>  <span class="hljs-number">2</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br>  <span class="hljs-number">3</span> <br>  <span class="hljs-number">4</span> <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BinaryTree</span></span><br><span class="hljs-class">  5 &#123;</span><br>  <span class="hljs-number">6</span>     <span class="hljs-keyword">char</span> data;<span class="hljs-comment">//节点值 数据域</span><br>  <span class="hljs-number">7</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BinaryTree</span> * <span class="hljs-title">pLchild</span>;</span><span class="hljs-comment">//左子树 左指针域</span><br>  <span class="hljs-number">8</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BinaryTree</span> * <span class="hljs-title">pRchild</span>;</span><span class="hljs-comment">//右子树 右指针域</span><br>  <span class="hljs-number">9</span> &#125;BINARYTREE,* PBINARYTREE;<br> <span class="hljs-number">10</span> <br> <span class="hljs-number">11</span> <span class="hljs-comment">//创建一个静态二叉树</span><br> <span class="hljs-number">12</span> <span class="hljs-function">PBINARYTREE <span class="hljs-title">create_binary_tree</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br> <span class="hljs-number">13</span> <span class="hljs-comment">//先序遍历</span><br> <span class="hljs-number">14</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pre_traversal</span><span class="hljs-params">(PBINARYTREE)</span></span>;<br> <span class="hljs-number">15</span> <span class="hljs-comment">//中序遍历</span><br> <span class="hljs-number">16</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">in_traversal</span><span class="hljs-params">(PBINARYTREE)</span></span>;<br> <span class="hljs-number">17</span> <span class="hljs-comment">//后序遍历</span><br> <span class="hljs-number">18</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">post_traversal</span><span class="hljs-params">(PBINARYTREE)</span></span>;<br> <span class="hljs-number">19</span> <br> <span class="hljs-number">20</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 21 </span>&#123;<br> <span class="hljs-number">22</span>     PBINARYTREE pT = <span class="hljs-literal">NULL</span>;<br> <span class="hljs-number">23</span>     pT = create_binary_tree();<br> <span class="hljs-number">24</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;先序遍历结果为：&quot;</span>);<br> <span class="hljs-number">25</span>     pre_traversal(pT);<br> <span class="hljs-number">26</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n中序遍历结果为：&quot;</span>);<br> <span class="hljs-number">27</span>     in_traversal(pT);<br> <span class="hljs-number">28</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n后序遍历结果为：&quot;</span>);<br> <span class="hljs-number">29</span>     post_traversal(pT);<br> <span class="hljs-number">30</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> <span class="hljs-number">31</span> &#125;<br> <span class="hljs-number">32</span> <br> <span class="hljs-number">33</span> <span class="hljs-comment">/**创建以下结果的二叉树,此二叉树结构是上面二叉树遍历的例子，可对比结果是否正确</span><br><span class="hljs-comment"> 34         A</span><br><span class="hljs-comment"> 35        / \</span><br><span class="hljs-comment"> 36       B   C</span><br><span class="hljs-comment"> 37      / \   \</span><br><span class="hljs-comment"> 38     D   E    F</span><br><span class="hljs-comment"> 39    / \   \  / \</span><br><span class="hljs-comment"> 40   G   H   I J  k</span><br><span class="hljs-comment"> 41 */</span><br> <span class="hljs-number">42</span> <span class="hljs-function">PBINARYTREE <span class="hljs-title">create_binary_tree</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 43 </span>&#123;<br> <span class="hljs-number">44</span>     <span class="hljs-comment">//为每个二叉树节点申请内存空间</span><br> <span class="hljs-number">45</span>     PBINARYTREE pA = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">46</span>     PBINARYTREE pB = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">47</span>     PBINARYTREE pC = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">48</span>     PBINARYTREE pD = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">49</span>     PBINARYTREE pE = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">50</span>     PBINARYTREE pF = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">51</span>     PBINARYTREE pG = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">52</span>     PBINARYTREE pH = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">53</span>     PBINARYTREE pI = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">54</span>     PBINARYTREE pJ = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">55</span>     PBINARYTREE pK = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">56</span>     <span class="hljs-comment">//给每个二叉树节点的数据域赋值</span><br> <span class="hljs-number">57</span>     pA-&gt;data = <span class="hljs-string">&#x27;A&#x27;</span>;<br> <span class="hljs-number">58</span>     pB-&gt;data = <span class="hljs-string">&#x27;B&#x27;</span>;<br> <span class="hljs-number">59</span>     pC-&gt;data = <span class="hljs-string">&#x27;C&#x27;</span>;<br> <span class="hljs-number">60</span>     pD-&gt;data = <span class="hljs-string">&#x27;D&#x27;</span>;<br> <span class="hljs-number">61</span>     pE-&gt;data = <span class="hljs-string">&#x27;E&#x27;</span>;<br> <span class="hljs-number">62</span>     pF-&gt;data = <span class="hljs-string">&#x27;F&#x27;</span>;<br> <span class="hljs-number">63</span>     pG-&gt;data = <span class="hljs-string">&#x27;G&#x27;</span>;<br> <span class="hljs-number">64</span>     pH-&gt;data = <span class="hljs-string">&#x27;H&#x27;</span>;<br> <span class="hljs-number">65</span>     pI-&gt;data = <span class="hljs-string">&#x27;I&#x27;</span>;<br> <span class="hljs-number">66</span>     pJ-&gt;data = <span class="hljs-string">&#x27;J&#x27;</span>;<br> <span class="hljs-number">67</span>     pK-&gt;data = <span class="hljs-string">&#x27;K&#x27;</span>;<br> <span class="hljs-number">68</span>     <span class="hljs-comment">//给每个二叉树节点的左右指针域赋值</span><br> <span class="hljs-number">69</span>     pA-&gt;pLchild = pB; <br> <span class="hljs-number">70</span>     pA-&gt;pRchild = pC; <br> <span class="hljs-number">71</span>     pB-&gt;pLchild = pD; <br> <span class="hljs-number">72</span>     pB-&gt;pRchild = pE;<br> <span class="hljs-number">73</span>     pC-&gt;pLchild = <span class="hljs-literal">NULL</span>; <br> <span class="hljs-number">74</span>     pC-&gt;pRchild = pF;<br> <span class="hljs-number">75</span>     pD-&gt;pLchild = pG; <br> <span class="hljs-number">76</span>     pD-&gt;pRchild = pH;<br> <span class="hljs-number">77</span>     pE-&gt;pLchild = <span class="hljs-literal">NULL</span>; <br> <span class="hljs-number">78</span>     pE-&gt;pRchild = pI;<br> <span class="hljs-number">79</span>     pF-&gt;pLchild = pJ; <br> <span class="hljs-number">80</span>     pF-&gt;pRchild = pK;<br> <span class="hljs-number">81</span>     pG-&gt;pLchild = pG-&gt;pRchild = <span class="hljs-literal">NULL</span>;<br> <span class="hljs-number">82</span>     pH-&gt;pLchild = pH-&gt;pRchild = <span class="hljs-literal">NULL</span>;<br> <span class="hljs-number">83</span>     pI-&gt;pLchild = pI-&gt;pRchild = <span class="hljs-literal">NULL</span>;<br> <span class="hljs-number">84</span>     pJ-&gt;pLchild = pJ-&gt;pRchild = <span class="hljs-literal">NULL</span>;<br> <span class="hljs-number">85</span>     pK-&gt;pLchild = pK-&gt;pRchild = <span class="hljs-literal">NULL</span>;<br> <span class="hljs-number">86</span>     <br> <span class="hljs-number">87</span>     <span class="hljs-keyword">return</span> pA;<br> <span class="hljs-number">88</span> &#125;<br> <span class="hljs-number">89</span> <br> <span class="hljs-number">90</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pre_traversal</span><span class="hljs-params">(PBINARYTREE pT)</span></span><br><span class="hljs-function"> 91 </span>&#123;<br> <span class="hljs-number">92</span>     <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != pT)<br> <span class="hljs-number">93</span>     &#123;<br> <span class="hljs-number">94</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\t&quot;</span>,pT-&gt;data);<br> <span class="hljs-number">95</span>         <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != pT-&gt;pLchild)<br> <span class="hljs-number">96</span>             pre_traversal(pT-&gt;pLchild);<br> <span class="hljs-number">97</span> <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != pT-&gt;pRchild)<br> <span class="hljs-number">98</span> pre_traversal(pT-&gt;pRchild);<br> <span class="hljs-number">99</span>     &#125;<br><span class="hljs-number">100</span> <span class="hljs-keyword">return</span>;<br><span class="hljs-number">101</span> &#125;<br><span class="hljs-number">102</span> <br><span class="hljs-number">103</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">in_traversal</span><span class="hljs-params">(PBINARYTREE pT)</span></span><br><span class="hljs-function">104 </span>&#123;<br><span class="hljs-number">105</span> <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != pT)<br><span class="hljs-number">106</span>     &#123;<br><span class="hljs-number">107</span> <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != pT-&gt;pLchild)<br><span class="hljs-number">108</span> in_traversal(pT-&gt;pLchild);<br><span class="hljs-number">109</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\t&quot;</span>,pT-&gt;data);<br><span class="hljs-number">110</span> <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != pT-&gt;pRchild)<br><span class="hljs-number">111</span> in_traversal(pT-&gt;pRchild);<br><span class="hljs-number">112</span>     &#125;<br><span class="hljs-number">113</span> <span class="hljs-keyword">return</span>;<br><span class="hljs-number">114</span> &#125;<br><span class="hljs-number">115</span> <br><span class="hljs-number">116</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">post_traversal</span><span class="hljs-params">(PBINARYTREE pT)</span></span><br><span class="hljs-function">117 </span>&#123;<br><span class="hljs-number">118</span> <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != pT)<br><span class="hljs-number">119</span>     &#123;<br><span class="hljs-number">120</span> <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != pT-&gt;pLchild)<br><span class="hljs-number">121</span> post_traversal(pT-&gt;pLchild);<br><span class="hljs-number">122</span> <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != pT-&gt;pRchild)<br><span class="hljs-number">123</span> post_traversal(pT-&gt;pRchild);<br><span class="hljs-number">124</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\t&quot;</span>,pT-&gt;data);<br><span class="hljs-number">125</span>     &#125;<br><span class="hljs-number">126</span> <span class="hljs-keyword">return</span>;<br><span class="hljs-number"><code class="language-hljs c">  <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br>  <span class="hljs-number">2</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br>  <span class="hljs-number">3</span> <br>  <span class="hljs-number">4</span> <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BinaryTree</span></span><br><span class="hljs-class">  5 &#123;</span><br>  <span class="hljs-number">6</span>     <span class="hljs-keyword">char</span> data;<span class="hljs-comment">//节点值 数据域</span><br>  <span class="hljs-number">7</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BinaryTree</span> * <span class="hljs-title">pLchild</span>;</span><span class="hljs-comment">//左子树 左指针域</span><br>  <span class="hljs-number">8</span>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BinaryTree</span> * <span class="hljs-title">pRchild</span>;</span><span class="hljs-comment">//右子树 右指针域</span><br>  <span class="hljs-number">9</span> &#125;BINARYTREE,* PBINARYTREE;<br> <span class="hljs-number">10</span> <br> <span class="hljs-number">11</span> <span class="hljs-comment">//创建一个静态二叉树</span><br> <span class="hljs-number">12</span> <span class="hljs-function">PBINARYTREE <span class="hljs-title">create_binary_tree</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br> <span class="hljs-number">13</span> <span class="hljs-comment">//先序遍历</span><br> <span class="hljs-number">14</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pre_traversal</span><span class="hljs-params">(PBINARYTREE)</span></span>;<br> <span class="hljs-number">15</span> <span class="hljs-comment">//中序遍历</span><br> <span class="hljs-number">16</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">in_traversal</span><span class="hljs-params">(PBINARYTREE)</span></span>;<br> <span class="hljs-number">17</span> <span class="hljs-comment">//后序遍历</span><br> <span class="hljs-number">18</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">post_traversal</span><span class="hljs-params">(PBINARYTREE)</span></span>;<br> <span class="hljs-number">19</span> <br> <span class="hljs-number">20</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 21 </span>&#123;<br> <span class="hljs-number">22</span>     PBINARYTREE pT = <span class="hljs-literal">NULL</span>;<br> <span class="hljs-number">23</span>     pT = create_binary_tree();<br> <span class="hljs-number">24</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;先序遍历结果为：&quot;</span>);<br> <span class="hljs-number">25</span>     pre_traversal(pT);<br> <span class="hljs-number">26</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n中序遍历结果为：&quot;</span>);<br> <span class="hljs-number">27</span>     in_traversal(pT);<br> <span class="hljs-number">28</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n后序遍历结果为：&quot;</span>);<br> <span class="hljs-number">29</span>     post_traversal(pT);<br> <span class="hljs-number">30</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> <span class="hljs-number">31</span> &#125;<br> <span class="hljs-number">32</span> <br> <span class="hljs-number">33</span> <span class="hljs-comment">/**创建以下结果的二叉树,此二叉树结构是上面二叉树遍历的例子，可对比结果是否正确</span><br><span class="hljs-comment"> 34         A</span><br><span class="hljs-comment"> 35        / \</span><br><span class="hljs-comment"> 36       B   C</span><br><span class="hljs-comment"> 37      / \   \</span><br><span class="hljs-comment"> 38     D   E    F</span><br><span class="hljs-comment"> 39    / \   \  / \</span><br><span class="hljs-comment"> 40   G   H   I J  k</span><br><span class="hljs-comment"> 41 */</span><br> <span class="hljs-number">42</span> <span class="hljs-function">PBINARYTREE <span class="hljs-title">create_binary_tree</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 43 </span>&#123;<br> <span class="hljs-number">44</span>     <span class="hljs-comment">//为每个二叉树节点申请内存空间</span><br> <span class="hljs-number">45</span>     PBINARYTREE pA = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">46</span>     PBINARYTREE pB = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">47</span>     PBINARYTREE pC = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">48</span>     PBINARYTREE pD = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">49</span>     PBINARYTREE pE = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">50</span>     PBINARYTREE pF = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">51</span>     PBINARYTREE pG = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">52</span>     PBINARYTREE pH = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">53</span>     PBINARYTREE pI = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">54</span>     PBINARYTREE pJ = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">55</span>     PBINARYTREE pK = (PBINARYTREE)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BINARYTREE));<br> <span class="hljs-number">56</span>     <span class="hljs-comment">//给每个二叉树节点的数据域赋值</span><br> <span class="hljs-number">57</span>     pA-&gt;data = <span class="hljs-string">&#x27;A&#x27;</span>;<br> <span class="hljs-number">58</span>     pB-&gt;data = <span class="hljs-string">&#x27;B&#x27;</span>;<br> <span class="hljs-number">59</span>     pC-&gt;data = <span class="hljs-string">&#x27;C&#x27;</span>;<br> <span class="hljs-number">60</span>     pD-&gt;data = <span class="hljs-string">&#x27;D&#x27;</span>;<br> <span class="hljs-number">61</span>     pE-&gt;data = <span class="hljs-string">&#x27;E&#x27;</span>;<br> <span class="hljs-number">62</span>     pF-&gt;data = <span class="hljs-string">&#x27;F&#x27;</span>;<br> <span class="hljs-number">63</span>     pG-&gt;data = <span class="hljs-string">&#x27;G&#x27;</span>;<br> <span class="hljs-number">64</span>     pH-&gt;data = <span class="hljs-string">&#x27;H&#x27;</span>;<br> <span class="hljs-number">65</span>     pI-&gt;data = <span class="hljs-string">&#x27;I&#x27;</span>;<br> <span class="hljs-number">66</span>     pJ-&gt;data = <span class="hljs-string">&#x27;J&#x27;</span>;<br> <span class="hljs-number">67</span>     pK-&gt;data = <span class="hljs-string">&#x27;K&#x27;</span>;<br> <span class="hljs-number">68</span>     <span class="hljs-comment">//给每个二叉树节点的左右指针域赋值</span><br> <span class="hljs-number">69</span>     pA-&gt;pLchild = pB; <br> <span class="hljs-number">70</span>     pA-&gt;pRchild = pC; <br> <span class="hljs-number">71</span>     pB-&gt;pLchild = pD; <br> <span class="hljs-number">72</span>     pB-&gt;pRchild = pE;<br> <span class="hljs-number">73</span>     pC-&gt;pLchild = <span class="hljs-literal">NULL</span>; <br> <span class="hljs-number">74</span>     pC-&gt;pRchild = pF;<br> <span class="hljs-number">75</span>     pD-&gt;pLchild = pG; <br> <span class="hljs-number">76</span>     pD-&gt;pRchild = pH;<br> <span class="hljs-number">77</span>     pE-&gt;pLchild = <span class="hljs-literal">NULL</span>; <br> <span class="hljs-number">78</span>     pE-&gt;pRchild = pI;<br> <span class="hljs-number">79</span>     pF-&gt;pLchild = pJ; <br> <span class="hljs-number">80</span>     pF-&gt;pRchild = pK;<br> <span class="hljs-number">81</span>     pG-&gt;pLchild = pG-&gt;pRchild = <span class="hljs-literal">NULL</span>;<br> <span class="hljs-number">82</span>     pH-&gt;pLchild = pH-&gt;pRchild = <span class="hljs-literal">NULL</span>;<br> <span class="hljs-number">83</span>     pI-&gt;pLchild = pI-&gt;pRchild = <span class="hljs-literal">NULL</span>;<br> <span class="hljs-number">84</span>     pJ-&gt;pLchild = pJ-&gt;pRchild = <span class="hljs-literal">NULL</span>;<br> <span class="hljs-number">85</span>     pK-&gt;pLchild = pK-&gt;pRchild = <span class="hljs-literal">NULL</span>;<br> <span class="hljs-number">86</span>     <br> <span class="hljs-number">87</span>     <span class="hljs-keyword">return</span> pA;<br> <span class="hljs-number">88</span> &#125;<br> <span class="hljs-number">89</span> <br> <span class="hljs-number">90</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pre_traversal</span><span class="hljs-params">(PBINARYTREE pT)</span></span><br><span class="hljs-function"> 91 </span>&#123;<br> <span class="hljs-number">92</span>     <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != pT)<br> <span class="hljs-number">93</span>     &#123;<br> <span class="hljs-number">94</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\t&quot;</span>,pT-&gt;data);<br> <span class="hljs-number">95</span>         <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != pT-&gt;pLchild)<br> <span class="hljs-number">96</span>             pre_traversal(pT-&gt;pLchild);<br> <span class="hljs-number">97</span> <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != pT-&gt;pRchild)<br> <span class="hljs-number">98</span> pre_traversal(pT-&gt;pRchild);<br> <span class="hljs-number">99</span>     &#125;<br><span class="hljs-number">100</span> <span class="hljs-keyword">return</span>;<br><span class="hljs-number">101</span> &#125;<br><span class="hljs-number">102</span> <br><span class="hljs-number">103</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">in_traversal</span><span class="hljs-params">(PBINARYTREE pT)</span></span><br><span class="hljs-function">104 </span>&#123;<br><span class="hljs-number">105</span> <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != pT)<br><span class="hljs-number">106</span>     &#123;<br><span class="hljs-number">107</span> <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != pT-&gt;pLchild)<br><span class="hljs-number">108</span> in_traversal(pT-&gt;pLchild);<br><span class="hljs-number">109</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\t&quot;</span>,pT-&gt;data);<br><span class="hljs-number">110</span> <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != pT-&gt;pRchild)<br><span class="hljs-number">111</span> in_traversal(pT-&gt;pRchild);<br><span class="hljs-number">112</span>     &#125;<br><span class="hljs-number">113</span> <span class="hljs-keyword">return</span>;<br><span class="hljs-number">114</span> &#125;<br><span class="hljs-number">115</span> <br><span class="hljs-number">116</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">post_traversal</span><span class="hljs-params">(PBINARYTREE pT)</span></span><br><span class="hljs-function">117 </span>&#123;<br><span class="hljs-number">118</span> <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != pT)<br><span class="hljs-number">119</span>     &#123;<br><span class="hljs-number">120</span> <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != pT-&gt;pLchild)<br><span class="hljs-number">121</span> post_traversal(pT-&gt;pLchild);<br><span class="hljs-number">122</span> <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> != pT-&gt;pRchild)<br><span class="hljs-number">123</span> post_traversal(pT-&gt;pRchild);<br><span class="hljs-number">124</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\t&quot;</span>,pT-&gt;data);<br><span class="hljs-number">125</span>     &#125;<br><span class="hljs-number">126</span> <span class="hljs-keyword">return</span>;<br><span class="hljs-number">127</span> &#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="树的应用"><a href="#树的应用" class="headerlink" title="树的应用"></a>树的应用</h5><ul><li>树是数据库中数据组织的一种重要形式</li><li>操作系统子父进程的关系本身就是一个树</li><li>面向对象语言中类的继承关系</li><li>赫夫曼树</li></ul><h4 id="图"><a href="#图" class="headerlink" title="图"></a>图</h4><blockquote><p>视频中没有具体讲解</p></blockquote><h4 id="查找和排序"><a href="#查找和排序" class="headerlink" title="查找和排序"></a>查找和排序</h4><h5 id="查找：折半查找"><a href="#查找：折半查找" class="headerlink" title="查找：折半查找"></a>查找：折半查找</h5><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><blockquote><p>关于排序算法，推荐去中文维基百科上面查看，有动态排序过程，有助于理解算法本质！</p><p><a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">排序算法</a></p></blockquote><ol><li><p>冒泡排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre class=" language-hljs c"> <span class="hljs-number">1</span> <span class="hljs-comment">//简单冒泡排序举例【升序】</span><br> <span class="hljs-number">2</span> <br> <span class="hljs-number">3</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-number">4</span> <br> <span class="hljs-number">5</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bubble_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *,<span class="hljs-keyword">int</span>)</span></span>;<br> <span class="hljs-number">6</span> <br> <span class="hljs-number">7</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 8 </span>&#123;<br> <span class="hljs-number">9</span>     <span class="hljs-keyword">int</span> i;<br><span class="hljs-number">10</span>     <span class="hljs-keyword">int</span> len = <span class="hljs-number">6</span>;<br><span class="hljs-number">11</span>     <span class="hljs-keyword">int</span> arr[len] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-number">12</span>     <br><span class="hljs-number">13</span>     bubble_sort(arr,len);<br><span class="hljs-number">14</span>     <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">6</span>;i++)<br><span class="hljs-number">15</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<br><span class="hljs-number">16</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-number">17</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">18</span> &#125;<br><span class="hljs-number">19</span> <br><span class="hljs-number">20</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bubble_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> * arr,<span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function">21 </span>&#123;<br><span class="hljs-number">22</span>     <span class="hljs-keyword">int</span> i,j,t;<br><span class="hljs-number">23</span>     <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; len; i++)<br><span class="hljs-number">24</span>     &#123;<br><span class="hljs-number">25</span>         <span class="hljs-keyword">for</span>(j = i+<span class="hljs-number">1</span>; j &lt; len<span class="hljs-number">-1</span>; j++)<br><span class="hljs-number">26</span>         &#123;<br><span class="hljs-number">27</span>             <span class="hljs-keyword">if</span>(arr[i] &gt; arr[j])<br><span class="hljs-number">28</span>             &#123;<br><span class="hljs-number">29</span>                 t = arr[i];<br><span class="hljs-number">30</span>                 arr[i] = arr[j];<br><span class="hljs-number">31</span>                 arr[j] = t;<br><span class="hljs-number">32</span>             &#125;<br><span class="hljs-number">33</span>         &#125;<br><span class="hljs-number">34</span>     &#125;<br><span class="hljs-number"><code class="language-hljs c"> <span class="hljs-number">1</span> <span class="hljs-comment">//简单冒泡排序举例【升序】</span><br> <span class="hljs-number">2</span> <br> <span class="hljs-number">3</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-number">4</span> <br> <span class="hljs-number">5</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bubble_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *,<span class="hljs-keyword">int</span>)</span></span>;<br> <span class="hljs-number">6</span> <br> <span class="hljs-number">7</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 8 </span>&#123;<br> <span class="hljs-number">9</span>     <span class="hljs-keyword">int</span> i;<br><span class="hljs-number">10</span>     <span class="hljs-keyword">int</span> len = <span class="hljs-number">6</span>;<br><span class="hljs-number">11</span>     <span class="hljs-keyword">int</span> arr[len] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-number">12</span>     <br><span class="hljs-number">13</span>     bubble_sort(arr,len);<br><span class="hljs-number">14</span>     <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">6</span>;i++)<br><span class="hljs-number">15</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<br><span class="hljs-number">16</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-number">17</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">18</span> &#125;<br><span class="hljs-number">19</span> <br><span class="hljs-number">20</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bubble_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> * arr,<span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function">21 </span>&#123;<br><span class="hljs-number">22</span>     <span class="hljs-keyword">int</span> i,j,t;<br><span class="hljs-number">23</span>     <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; len; i++)<br><span class="hljs-number">24</span>     &#123;<br><span class="hljs-number">25</span>         <span class="hljs-keyword">for</span>(j = i+<span class="hljs-number">1</span>; j &lt; len<span class="hljs-number">-1</span>; j++)<br><span class="hljs-number">26</span>         &#123;<br><span class="hljs-number">27</span>             <span class="hljs-keyword">if</span>(arr[i] &gt; arr[j])<br><span class="hljs-number">28</span>             &#123;<br><span class="hljs-number">29</span>                 t = arr[i];<br><span class="hljs-number">30</span>                 arr[i] = arr[j];<br><span class="hljs-number">31</span>                 arr[j] = t;<br><span class="hljs-number">32</span>             &#125;<br><span class="hljs-number">33</span>         &#125;<br><span class="hljs-number">34</span>     &#125;<br><span class="hljs-number">35</span> &#125;<br></code></pre></td></tr></table></figure></li><li><p>插入排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre class=" language-hljs c"> <span class="hljs-number">1</span> <span class="hljs-comment">//直接插入排序【升序】</span><br> <span class="hljs-number">2</span> <br> <span class="hljs-number">3</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-number">4</span> <br> <span class="hljs-number">5</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertion_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *,<span class="hljs-keyword">int</span>)</span></span>;<br> <span class="hljs-number">6</span> <br> <span class="hljs-number">7</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 8 </span>&#123;<br> <span class="hljs-number">9</span>     <span class="hljs-keyword">int</span> i;<br><span class="hljs-number">10</span>     <span class="hljs-keyword">int</span> len = <span class="hljs-number">6</span>;<span class="hljs-comment">//数组长度</span><br><span class="hljs-number">11</span>     <span class="hljs-keyword">int</span> arr[len] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-number">12</span>     insertion_sort(arr,len);<br><span class="hljs-number">13</span>     <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">6</span>;i++)<br><span class="hljs-number">14</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<br><span class="hljs-number">15</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-number">16</span> &#125;<br><span class="hljs-number">17</span> <br><span class="hljs-number">18</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertion_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> * arr,<span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function">19 </span>&#123;<br><span class="hljs-number">20</span>     <span class="hljs-keyword">int</span> i,j,t;<br><span class="hljs-number">21</span>     <span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>; i&lt;len; i++)<br><span class="hljs-number">22</span>     &#123;<br><span class="hljs-number">23</span>         <span class="hljs-keyword">if</span>(arr[i]&lt;arr[i<span class="hljs-number">-1</span>])<br><span class="hljs-number">24</span>         &#123;<br><span class="hljs-number">25</span>             t = arr[i];<br><span class="hljs-number">26</span>             j = i - <span class="hljs-number">1</span>;<br><span class="hljs-number">27</span>             <span class="hljs-keyword">for</span>(j; j&gt;=<span class="hljs-number">0</span> &amp;&amp; arr[j]&gt;t;j--)<br><span class="hljs-number">28</span>             &#123;<br><span class="hljs-number">29</span>                 arr[j+<span class="hljs-number">1</span>] = arr[j];<br><span class="hljs-number">30</span>             &#125;<br><span class="hljs-number">31</span>             a[j+<span class="hljs-number">1</span>] = t;<br><span class="hljs-number">32</span>         &#125;<br><span class="hljs-number">33</span>     &#125;<br><span class="hljs-number"><code class="language-hljs c"> <span class="hljs-number">1</span> <span class="hljs-comment">//直接插入排序【升序】</span><br> <span class="hljs-number">2</span> <br> <span class="hljs-number">3</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-number">4</span> <br> <span class="hljs-number">5</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertion_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *,<span class="hljs-keyword">int</span>)</span></span>;<br> <span class="hljs-number">6</span> <br> <span class="hljs-number">7</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 8 </span>&#123;<br> <span class="hljs-number">9</span>     <span class="hljs-keyword">int</span> i;<br><span class="hljs-number">10</span>     <span class="hljs-keyword">int</span> len = <span class="hljs-number">6</span>;<span class="hljs-comment">//数组长度</span><br><span class="hljs-number">11</span>     <span class="hljs-keyword">int</span> arr[len] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-number">12</span>     insertion_sort(arr,len);<br><span class="hljs-number">13</span>     <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">6</span>;i++)<br><span class="hljs-number">14</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<br><span class="hljs-number">15</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-number">16</span> &#125;<br><span class="hljs-number">17</span> <br><span class="hljs-number">18</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertion_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> * arr,<span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function">19 </span>&#123;<br><span class="hljs-number">20</span>     <span class="hljs-keyword">int</span> i,j,t;<br><span class="hljs-number">21</span>     <span class="hljs-keyword">for</span> (i=<span class="hljs-number">1</span>; i&lt;len; i++)<br><span class="hljs-number">22</span>     &#123;<br><span class="hljs-number">23</span>         <span class="hljs-keyword">if</span>(arr[i]&lt;arr[i<span class="hljs-number">-1</span>])<br><span class="hljs-number">24</span>         &#123;<br><span class="hljs-number">25</span>             t = arr[i];<br><span class="hljs-number">26</span>             j = i - <span class="hljs-number">1</span>;<br><span class="hljs-number">27</span>             <span class="hljs-keyword">for</span>(j; j&gt;=<span class="hljs-number">0</span> &amp;&amp; arr[j]&gt;t;j--)<br><span class="hljs-number">28</span>             &#123;<br><span class="hljs-number">29</span>                 arr[j+<span class="hljs-number">1</span>] = arr[j];<br><span class="hljs-number">30</span>             &#125;<br><span class="hljs-number">31</span>             a[j+<span class="hljs-number">1</span>] = t;<br><span class="hljs-number">32</span>         &#125;<br><span class="hljs-number">33</span>     &#125;<br><span class="hljs-number">34</span> &#125;<br></code></pre></td></tr></table></figure></li><li><p>选择排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre class=" language-hljs c"> <span class="hljs-number">1</span> <span class="hljs-comment">//直接选择排序【升序】</span><br> <span class="hljs-number">2</span> <br> <span class="hljs-number">3</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-number">4</span> <br> <span class="hljs-number">5</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">selection_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *,<span class="hljs-keyword">int</span>)</span></span>;<br> <span class="hljs-number">6</span> <br> <span class="hljs-number">7</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 8 </span>&#123;<br> <span class="hljs-number">9</span>     <span class="hljs-keyword">int</span> i;<br><span class="hljs-number">10</span>     <span class="hljs-keyword">int</span> len = <span class="hljs-number">6</span>;<span class="hljs-comment">//数组长度</span><br><span class="hljs-number">11</span>     <span class="hljs-keyword">int</span> arr[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-number">12</span>     selection_sort(arr,len);<br><span class="hljs-number">13</span>     <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">6</span>;i++)<br><span class="hljs-number">14</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<br><span class="hljs-number">15</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-number">16</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">17</span> &#125;<br><span class="hljs-number">18</span> <br><span class="hljs-number">19</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">selection_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> * arr,<span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function">20 </span>&#123;<br><span class="hljs-number">21</span>     <span class="hljs-keyword">int</span> i,j,t,min;<br><span class="hljs-number">22</span>     <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;len<span class="hljs-number">-1</span>; i++)<br><span class="hljs-number">23</span>     &#123;<br><span class="hljs-number">24</span>         <span class="hljs-keyword">for</span>(min=i,j=i+<span class="hljs-number">1</span>; j&lt;len; j++)<br><span class="hljs-number">25</span>         &#123;<br><span class="hljs-number">26</span>             <span class="hljs-keyword">if</span>(arr[min] &lt; arr[j])<br><span class="hljs-number">27</span>                 min = j;         <br><span class="hljs-number">28</span>         &#125;<br><span class="hljs-number">29</span>         <span class="hljs-keyword">if</span>(min != j)<br><span class="hljs-number">30</span>         &#123;<br><span class="hljs-number">31</span>             t = arr[i];<br><span class="hljs-number">32</span>             arr[i] = arr[min];<br><span class="hljs-number">33</span>             arr[min] = t;<br><span class="hljs-number">34</span>          &#125;<br><span class="hljs-number">35</span>     &#125;<br><span class="hljs-number"><code class="language-hljs c"> <span class="hljs-number">1</span> <span class="hljs-comment">//直接选择排序【升序】</span><br> <span class="hljs-number">2</span> <br> <span class="hljs-number">3</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-number">4</span> <br> <span class="hljs-number">5</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">selection_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *,<span class="hljs-keyword">int</span>)</span></span>;<br> <span class="hljs-number">6</span> <br> <span class="hljs-number">7</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 8 </span>&#123;<br> <span class="hljs-number">9</span>     <span class="hljs-keyword">int</span> i;<br><span class="hljs-number">10</span>     <span class="hljs-keyword">int</span> len = <span class="hljs-number">6</span>;<span class="hljs-comment">//数组长度</span><br><span class="hljs-number">11</span>     <span class="hljs-keyword">int</span> arr[<span class="hljs-number">6</span>] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-number">12</span>     selection_sort(arr,len);<br><span class="hljs-number">13</span>     <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">6</span>;i++)<br><span class="hljs-number">14</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<br><span class="hljs-number">15</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-number">16</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">17</span> &#125;<br><span class="hljs-number">18</span> <br><span class="hljs-number">19</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">selection_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> * arr,<span class="hljs-keyword">int</span> len)</span></span><br><span class="hljs-function">20 </span>&#123;<br><span class="hljs-number">21</span>     <span class="hljs-keyword">int</span> i,j,t,min;<br><span class="hljs-number">22</span>     <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;len<span class="hljs-number">-1</span>; i++)<br><span class="hljs-number">23</span>     &#123;<br><span class="hljs-number">24</span>         <span class="hljs-keyword">for</span>(min=i,j=i+<span class="hljs-number">1</span>; j&lt;len; j++)<br><span class="hljs-number">25</span>         &#123;<br><span class="hljs-number">26</span>             <span class="hljs-keyword">if</span>(arr[min] &lt; arr[j])<br><span class="hljs-number">27</span>                 min = j;         <br><span class="hljs-number">28</span>         &#125;<br><span class="hljs-number">29</span>         <span class="hljs-keyword">if</span>(min != j)<br><span class="hljs-number">30</span>         &#123;<br><span class="hljs-number">31</span>             t = arr[i];<br><span class="hljs-number">32</span>             arr[i] = arr[min];<br><span class="hljs-number">33</span>             arr[min] = t;<br><span class="hljs-number">34</span>          &#125;<br><span class="hljs-number">35</span>     &#125;<br><span class="hljs-number">36</span> &#125;<br></code></pre></td></tr></table></figure></li><li><p>快速排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre class=" language-hljs c"> <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-number">2</span> <br> <span class="hljs-number">3</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)</span></span>;<br> <span class="hljs-number">4</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find_pos</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)</span></span>;<br> <span class="hljs-number">5</span> <br> <span class="hljs-number">6</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 7 </span>&#123;<br> <span class="hljs-number">8</span>     <span class="hljs-keyword">int</span> i,len,low,high;<br> <span class="hljs-number">9</span>     low = <span class="hljs-number">0</span>;<br><span class="hljs-number">10</span>     high = <span class="hljs-number">6</span>;<br><span class="hljs-number">11</span>     <span class="hljs-keyword">int</span> arr[<span class="hljs-number">7</span>] = &#123;<span class="hljs-number">13</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-number">12</span>     quick_sort(arr,low,high);<span class="hljs-comment">//low表示起始位置，high表示结束位置</span><br><span class="hljs-number">13</span>     <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">7</span>;i++)<br><span class="hljs-number">14</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<br><span class="hljs-number">15</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-number">16</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">17</span> &#125;<br><span class="hljs-number">18</span> <br><span class="hljs-number">19</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> * arr,<span class="hljs-keyword">int</span> low,<span class="hljs-keyword">int</span> high)</span></span><br><span class="hljs-function">20 </span>&#123;<br><span class="hljs-number">21</span>     <span class="hljs-keyword">int</span> pos;<br><span class="hljs-number">22</span>     <span class="hljs-keyword">if</span> (low &lt; high)<br><span class="hljs-number">23</span>     &#123;<br><span class="hljs-number">24</span>         pos = find_pos(arr,low,high);<br><span class="hljs-number">25</span>         quick_sort(arr,low,pos<span class="hljs-number">-1</span>);<br><span class="hljs-number">26</span>         quick_sort(arr,pos+<span class="hljs-number">1</span>,high);<br><span class="hljs-number">27</span>     &#125;<br><span class="hljs-number">28</span> &#125;<br><span class="hljs-number">29</span> <br><span class="hljs-number">30</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find_pos</span><span class="hljs-params">(<span class="hljs-keyword">int</span> * arr,<span class="hljs-keyword">int</span> low,<span class="hljs-keyword">int</span> high)</span></span><br><span class="hljs-function">31 </span>&#123;<br><span class="hljs-number">32</span>     <span class="hljs-keyword">int</span> val = arr[low];<br><span class="hljs-number">33</span>     <span class="hljs-keyword">while</span>(low &lt; high)<br><span class="hljs-number">34</span>     &#123;<br><span class="hljs-number">35</span>         <span class="hljs-keyword">while</span>(low &lt; high &amp;&amp; arr[high] &gt;= val)<br><span class="hljs-number">36</span>             --high;<br><span class="hljs-number">37</span>         arr[low] = arr[high];<br><span class="hljs-number">38</span>         <span class="hljs-keyword">while</span>(low &lt; high &amp;&amp; arr[low] &lt;= val)<br><span class="hljs-number">39</span>             ++low;<br><span class="hljs-number">40</span>         arr[high] = arr[low];<br><span class="hljs-number">41</span>     &#125;<br><span class="hljs-number">42</span>     arr[low] = val;<br><span class="hljs-number">43</span>     <span class="hljs-keyword">return</span> high;<br><span class="hljs-number"><code class="language-hljs c"> <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-number">2</span> <br> <span class="hljs-number">3</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)</span></span>;<br> <span class="hljs-number">4</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find_pos</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *,<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)</span></span>;<br> <span class="hljs-number">5</span> <br> <span class="hljs-number">6</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 7 </span>&#123;<br> <span class="hljs-number">8</span>     <span class="hljs-keyword">int</span> i,len,low,high;<br> <span class="hljs-number">9</span>     low = <span class="hljs-number">0</span>;<br><span class="hljs-number">10</span>     high = <span class="hljs-number">6</span>;<br><span class="hljs-number">11</span>     <span class="hljs-keyword">int</span> arr[<span class="hljs-number">7</span>] = &#123;<span class="hljs-number">13</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-number">12</span>     quick_sort(arr,low,high);<span class="hljs-comment">//low表示起始位置，high表示结束位置</span><br><span class="hljs-number">13</span>     <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">7</span>;i++)<br><span class="hljs-number">14</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<br><span class="hljs-number">15</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-number">16</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">17</span> &#125;<br><span class="hljs-number">18</span> <br><span class="hljs-number">19</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> * arr,<span class="hljs-keyword">int</span> low,<span class="hljs-keyword">int</span> high)</span></span><br><span class="hljs-function">20 </span>&#123;<br><span class="hljs-number">21</span>     <span class="hljs-keyword">int</span> pos;<br><span class="hljs-number">22</span>     <span class="hljs-keyword">if</span> (low &lt; high)<br><span class="hljs-number">23</span>     &#123;<br><span class="hljs-number">24</span>         pos = find_pos(arr,low,high);<br><span class="hljs-number">25</span>         quick_sort(arr,low,pos<span class="hljs-number">-1</span>);<br><span class="hljs-number">26</span>         quick_sort(arr,pos+<span class="hljs-number">1</span>,high);<br><span class="hljs-number">27</span>     &#125;<br><span class="hljs-number">28</span> &#125;<br><span class="hljs-number">29</span> <br><span class="hljs-number">30</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find_pos</span><span class="hljs-params">(<span class="hljs-keyword">int</span> * arr,<span class="hljs-keyword">int</span> low,<span class="hljs-keyword">int</span> high)</span></span><br><span class="hljs-function">31 </span>&#123;<br><span class="hljs-number">32</span>     <span class="hljs-keyword">int</span> val = arr[low];<br><span class="hljs-number">33</span>     <span class="hljs-keyword">while</span>(low &lt; high)<br><span class="hljs-number">34</span>     &#123;<br><span class="hljs-number">35</span>         <span class="hljs-keyword">while</span>(low &lt; high &amp;&amp; arr[high] &gt;= val)<br><span class="hljs-number">36</span>             --high;<br><span class="hljs-number">37</span>         arr[low] = arr[high];<br><span class="hljs-number">38</span>         <span class="hljs-keyword">while</span>(low &lt; high &amp;&amp; arr[low] &lt;= val)<br><span class="hljs-number">39</span>             ++low;<br><span class="hljs-number">40</span>         arr[high] = arr[low];<br><span class="hljs-number">41</span>     &#125;<br><span class="hljs-number">42</span>     arr[low] = val;<br><span class="hljs-number">43</span>     <span class="hljs-keyword">return</span> high;<br><span class="hljs-number">44</span> &#125;<br></code></pre></td></tr></table></figure></li><li><p>归并排序</p><blockquote><p>摘自<a href="https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">中文维基百科-归并排序</a></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre class=" language-hljs c"> <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-number">2</span> <br> <span class="hljs-number">3</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> len)</span></span>;<br> <span class="hljs-number">4</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort_recursive</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> reg[], <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span></span>;<br> <span class="hljs-number">5</span> <br> <span class="hljs-number">6</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 7 </span>&#123;<br> <span class="hljs-number">8</span>     <span class="hljs-keyword">int</span> i;<br> <span class="hljs-number">9</span>     <span class="hljs-keyword">int</span> arr[<span class="hljs-number">7</span>] = &#123;<span class="hljs-number">13</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-number">10</span>     merge_sort(arr,<span class="hljs-number">7</span>);<br><span class="hljs-number">11</span>     <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">7</span>;i++)<br><span class="hljs-number">12</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<br><span class="hljs-number">13</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-number">14</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">15</span> &#125;<br><span class="hljs-number">16</span> <br><span class="hljs-number">17</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort_recursive</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> reg[], <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;<br><span class="hljs-number">18</span>     <span class="hljs-keyword">if</span> (start &gt;= end)<br><span class="hljs-number">19</span>         <span class="hljs-keyword">return</span>;<br><span class="hljs-number">20</span>     <span class="hljs-keyword">int</span> len = end - start, mid = (len &gt;&gt; <span class="hljs-number">1</span>) + start;<br><span class="hljs-number">21</span>     <span class="hljs-keyword">int</span> start1 = start, end1 = mid;<br><span class="hljs-number">22</span>     <span class="hljs-keyword">int</span> start2 = mid + <span class="hljs-number">1</span>, end2 = end;<br><span class="hljs-number">23</span>     merge_sort_recursive(arr, reg, start1, end1);<br><span class="hljs-number">24</span>     merge_sort_recursive(arr, reg, start2, end2);<br><span class="hljs-number">25</span>     <span class="hljs-keyword">int</span> k = start;<br><span class="hljs-number">26</span>     <span class="hljs-keyword">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2)<br><span class="hljs-number">27</span>         reg[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++];<br><span class="hljs-number">28</span>     <span class="hljs-keyword">while</span> (start1 &lt;= end1)<br><span class="hljs-number">29</span>         reg[k++] = arr[start1++];<br><span class="hljs-number">30</span>     <span class="hljs-keyword">while</span> (start2 &lt;= end2)<br><span class="hljs-number">31</span>         reg[k++] = arr[start2++];<br><span class="hljs-number">32</span>     <span class="hljs-keyword">for</span> (k = start; k &lt;= end; k++)<br><span class="hljs-number">33</span>         arr[k] = reg[k];<br><span class="hljs-number">34</span> &#125;<br><span class="hljs-number">35</span> <br><span class="hljs-number">36</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> len)</span> </span>&#123;<br><span class="hljs-number">37</span>     <span class="hljs-keyword">int</span> reg[len];<br><span class="hljs-number">38</span>     merge_sort_recursive(arr, reg, <span class="hljs-number">0</span>, len - <span class="hljs-number">1</span>);<br><span class="hljs-number"><code class="language-hljs c"> <span class="hljs-number">1</span> <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <span class="hljs-number">2</span> <br> <span class="hljs-number">3</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> len)</span></span>;<br> <span class="hljs-number">4</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort_recursive</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> reg[], <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span></span>;<br> <span class="hljs-number">5</span> <br> <span class="hljs-number">6</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"> 7 </span>&#123;<br> <span class="hljs-number">8</span>     <span class="hljs-keyword">int</span> i;<br> <span class="hljs-number">9</span>     <span class="hljs-keyword">int</span> arr[<span class="hljs-number">7</span>] = &#123;<span class="hljs-number">13</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-number">10</span>     merge_sort(arr,<span class="hljs-number">7</span>);<br><span class="hljs-number">11</span>     <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">7</span>;i++)<br><span class="hljs-number">12</span>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<br><span class="hljs-number">13</span>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-number">14</span>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-number">15</span> &#125;<br><span class="hljs-number">16</span> <br><span class="hljs-number">17</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort_recursive</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> reg[], <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;<br><span class="hljs-number">18</span>     <span class="hljs-keyword">if</span> (start &gt;= end)<br><span class="hljs-number">19</span>         <span class="hljs-keyword">return</span>;<br><span class="hljs-number">20</span>     <span class="hljs-keyword">int</span> len = end - start, mid = (len &gt;&gt; <span class="hljs-number">1</span>) + start;<br><span class="hljs-number">21</span>     <span class="hljs-keyword">int</span> start1 = start, end1 = mid;<br><span class="hljs-number">22</span>     <span class="hljs-keyword">int</span> start2 = mid + <span class="hljs-number">1</span>, end2 = end;<br><span class="hljs-number">23</span>     merge_sort_recursive(arr, reg, start1, end1);<br><span class="hljs-number">24</span>     merge_sort_recursive(arr, reg, start2, end2);<br><span class="hljs-number">25</span>     <span class="hljs-keyword">int</span> k = start;<br><span class="hljs-number">26</span>     <span class="hljs-keyword">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2)<br><span class="hljs-number">27</span>         reg[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++];<br><span class="hljs-number">28</span>     <span class="hljs-keyword">while</span> (start1 &lt;= end1)<br><span class="hljs-number">29</span>         reg[k++] = arr[start1++];<br><span class="hljs-number">30</span>     <span class="hljs-keyword">while</span> (start2 &lt;= end2)<br><span class="hljs-number">31</span>         reg[k++] = arr[start2++];<br><span class="hljs-number">32</span>     <span class="hljs-keyword">for</span> (k = start; k &lt;= end; k++)<br><span class="hljs-number">33</span>         arr[k] = reg[k];<br><span class="hljs-number">34</span> &#125;<br><span class="hljs-number">35</span> <br><span class="hljs-number">36</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> len)</span> </span>&#123;<br><span class="hljs-number">37</span>     <span class="hljs-keyword">int</span> reg[len];<br><span class="hljs-number">38</span>     merge_sort_recursive(arr, reg, <span class="hljs-number">0</span>, len - <span class="hljs-number">1</span>);<br><span class="hljs-number">39</span> &#125; <br></code></pre></td></tr></table></figure></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>坚持就是胜利！</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kevin Kelly给年轻人的99条建议</title>
    <link href="/2021/05/09/Kevin%20Kelly%E7%BB%99%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%8499%E6%9D%A1%E5%BB%BA%E8%AE%AE/"/>
    <url>/2021/05/09/Kevin%20Kelly%E7%BB%99%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%8499%E6%9D%A1%E5%BB%BA%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Kevin-Kelly-给年轻人的99条建议"><a href="#Kevin-Kelly-给年轻人的99条建议" class="headerlink" title="Kevin Kelly 给年轻人的99条建议"></a>Kevin Kelly 给年轻人的99条建议</h1><blockquote><p>凯文·凯利（Kevin Kelly，网名 KK）是著名的科技评论家，曾经担任《连线》（Wired）杂志的第一任主编，他的著作《失控》在国内外都非常有名。</p><p>……</p><p>去年4月28日，是他68岁的生日。老爷子在个人网站上，发表了一篇<a href="https://kk.org/thetechnium/68-bits-of-unsolicited-advice/">《给年轻人的68条建议》</a>，谈自己的人生体会。文章很受欢迎，浏览量非常大，译成了十几种外语。</p><p>今年4月28日，69岁生日时，他又续写了一篇<a href="https://kk.org/thetechnium/99-additional-bits-of-unsolicited-advice/">《给年轻人的99 条建议》。</a></p><p>……</p><p>这些建议，读起来很有意思。我觉得，他年纪大了以后，对传统的观点越来越不屑一顾了，更强调叛逆和逆向思维。</p><p><a href="http://www.ruanyifeng.com/blog/2021/05/weekly-issue-157.html">科技爱好者周刊（第 157 期）</a>：KK 给年轻人的建议，阮一峰</p></blockquote><p>我在读了这篇99个建议之后，最大的感受是——怎么这么长啊，谁有耐心读完呢？</p><p>然后我就用<strong>人工，智能</strong>给他：</p><ol><li>翻译和分类，让可读性稍稍提升。</li><li>搜集了一些其他人对句子的理解。</li></ol><details style="box-sizing: inherit; display: block; max-width: var(--responsive--aligndefault-width); border: 1px solid rgb(170, 170, 170); border-radius: 4px; padding: 0.5em 0.5em 0px; margin-bottom: var(--global--spacing-vertical); margin-top: var(--global--spacing-vertical); margin-left: auto; margin-right: auto;"><summary style="box-sizing: inherit; display: list-item; max-width: var(--global--spacing-measure); font-weight: 700; margin: -0.5em -0.5em 0px; padding: 0.5em;">提示：点我！！！</summary></details><p>你也可以在留言里写下你对这些建议的感悟，我会把它加上去。</p><p>我觉得比较有意思的有：</p><ol><li>忽略别人可能对你的看法，因为他们不是这样想的。</li><li>避免按下贪睡按钮。那只是训练你睡过头。</li><li>我们不是暂时拥有灵魂的肉体。我们是暂时拥有肉体的灵魂。</li><li>做个好祖先。做一些下一代会感谢你的事情。一件简单的事情就是种一棵树。</li><li>……</li></ol><p>如果发现有错误和不合适的翻译，请留言指出，我可以把它换成你的版本。</p><p>目录</p><p><a href="#%E6%94%B9%E5%8F%98%E4%B8%96%E7%95%8C">改变世界</a><a href="#%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F">工作方式</a><a href="#%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7">实用技巧</a><a href="#%E5%A5%BD%E4%B9%A0%E6%83%AF">好习惯</a><a href="#%E6%8A%95%E8%B5%84%E5%BB%BA%E8%AE%AE">投资建议</a><a href="#%E5%BE%85%E4%BA%BA%E4%B9%8B%E9%81%93">待人之道</a><a href="#%E8%AF%88%E9%AA%97%E5%85%8B%E6%98%9F">诈骗克星</a><a href="#%E9%81%BF%E5%85%8D%E5%8F%97%E4%BC%A4">避免受伤</a><a href="#%E5%AE%B6%E5%BA%AD%E7%94%9F%E6%B4%BB">家庭生活</a><a href="#%E7%A6%85">禅</a><a href="#%E6%97%A0%E6%B3%95%E5%BD%92%E7%B1%BB">无法归类</a><a href="#%E6%88%91%E5%AF%B9%E8%BF%99%E4%BA%9B%E5%BB%BA%E8%AE%AE%E7%9A%84%E7%9C%8B%E6%B3%95">我对这些建议的看法</a></p><h2 id="改变世界"><a href="#改变世界" class="headerlink" title="改变世界"></a>改变世界</h2><ol><li>小时候，让你与其它同学格格不入的东西，长大后会帮助你成功，如果你不失去它的话。</li><li>如果在你认为会失败的地方失败了，那就不是失败。</li><li>最大的回报来自于从事无人知晓的工作。如果你可能的话，在没有人知道你在做什么的地方工作。</li><li>不要为了赚钱而创造东西；赚钱是为了让你能创造东西。活儿干得好会带来更多的活儿。</li><li>众多的坏主意是形成一个好主意的必要条件。</li><li>智者看到一样东西，疑问要比答案多。</li><li>大多数一夜之间的成功(实际上是任何重大的成功)至少需要5年的时间。规划好你的人生。</li><li>当你不再转变观点，你就不再成长。</li><li>要想变得富有，就要积累所有金钱买不到的东西。</li><li>正人先正己。</li><li>在头脑风暴、即兴发挥、与他人合作时，如果你有意使用“是的，而且”引出例证，来代替通过“不对，但是”当场反驳，那么您获得更深远的成果。</li><li>工作是为了成为(理想的自己)，而不是为了获得(回报)。</li><li>在通往远大目标的路上，庆祝最小的胜利，就好像每一个胜利都是最终目标。无论结局如何，你都是胜利者。</li><li>有价值的重复: 反复确认，一次成功。</li><li>生活热情应当适合自己，但人生目标应该超越自己。为比个人更远大的事工作。</li><li>金钱的作用被高估了。真正的创新很少需要大量资金，否则大公司将垄断创新。相反，几乎所有的突破都是由那些缺乏钱的人实现的，正是因为他们资源有限，才被迫进行创新，依靠自己的热情、毅力和独创性来寻找新的方法。资源不足是创新的优势。</li><li>忽略别人可能对你的看法，因为他们不是这样想的。</li><li>坏事可能发生得很快，但几乎所有好事都发生得很慢。</li><li>不要担心你如何或从哪里开始。只要你继续前进，你的成功将离你的起点很远。</li><li>如果你的目标没有规划，那它就是一个梦想。</li><li>不少最伟大的突破被(普通人)错过了，因为它们看起来就很难。</li><li>一切都是先难后易。在出现转折点之前，这都是一个愚蠢的想法。</li><li>逆水行舟，不进则退。</li><li>这是制作东西的最佳时机。20年后最伟大、最酷的创意还没有一个被发明出来。现在开始并不晚。</li><li>要成功，就要让别人付钱给你; 要变得富有，就要帮助别人成功。</li><li>做东西的时候，一定要多加一些东西 —— 额外的材料、额外的零件、额外的空间和额外的装饰。这些额外的东西可以作为错误的备份，减轻压力，为将来做好准备。它们是最便宜的保险。</li><li>历史告诉我们，从现在开始的100年后，你认为会被证明是错误的一些假设。今天问自己一个很好的问题: “我可能错在哪里?”</li></ol><h2 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h2><ol><li>成功秘诀: 少说，多做。</li><li>轻、重、缓、急</li><li>在所有事情上（除了爱情）要先从退出策略开始计划。为结局做准备。几乎任何东西都是进场容易出场难。</li><li>你的工作将是无穷无尽的，但你的时间是有限的。你不能限制工作，所以你必须限制你的时间。时间是你唯一能做的事情。</li><li>不要让你的电子邮件收件箱成为你的待办事项清单。</li><li>解开缠结的最好方法不是“解开”绳结，而是把绳结拉得越来越大。只要尽可能地把这些乱七八糟的东西弄得大大的，松散的，敞开的就行了。当你打开这些结时，它们会自己解开。适用于软线、绳、软管、纱线或电子电缆。</li><li>为了对付对手，先成为他们的朋友。</li><li>对待一件简单的事情（几乎是任何事情）但要非常认真地对待，就好像它是世界上唯一的东西，或者也许整个世界都在里面一样。认真对待它，你就让它闪闪发光。</li></ol><h2 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h2><ol><li><details open style="box-sizing: inherit; display: block; max-width: var(--global--spacing-measure); border: 1px solid rgb(170, 170, 170); border-radius: 4px; padding: 0.5em; margin-bottom: 1em;"><summary style="box-sizing: inherit; display: list-item; max-width: var(--global--spacing-measure); font-weight: 700; margin: -0.5em -0.5em 0.5em; padding: 0.5em; border-bottom: 1px solid rgb(170, 170, 170);">学会闭眼用一只手打结。在你以后的生活中，你用这个结的次数会超出你的想象。</summary><p style="box-sizing: inherit; padding: 0px; margin: 0px; -webkit-font-smoothing: antialiased; line-height: var(--wp--typography--line-height,var(--global--line-height-body)); max-width: var(--global--spacing-measure); overflow-wrap: break-word; font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, &quot;Microsoft YaHei New&quot;, &quot;STHeiti Light&quot;, sans-serif;">Learn how to tie a bowline knot. Practice in the dark. With one hand. For the rest of your life you’ll use this knot more times than you would ever believe.</p><hr style="box-sizing: content-box; height: 0px; overflow: visible; padding: 0px; margin: 0px auto; -webkit-font-smoothing: antialiased; border-top-style: none; border-right-style: none; border-left-style: none; border-bottom: var(--separator--height) solid var(--separator--border-color); clear: both; max-width: none;"><p style="box-sizing: inherit; padding: 0px; margin: 0px; -webkit-font-smoothing: antialiased; line-height: var(--wp--typography--line-height,var(--global--line-height-body)); max-width: var(--global--spacing-measure); overflow-wrap: break-word; font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, &quot;Microsoft YaHei New&quot;, &quot;STHeiti Light&quot;, sans-serif;">注释：<br style="box-sizing: inherit; max-width: var(--global--spacing-measure);">不太清楚打结有什么用，查了下只知道这种结比较牢固，期待你的分享。</p></details></li><li><p>不要借钱给朋友，除非你准备好把它当作礼物。</p></li><li><p>搭便车的时候，要让自己看起来像你愿意载的人。</p></li><li><p>如果你不能说出自己迫切需要的东西，那可能就是睡眠。</p></li><li><p>当你遇到卡住的螺栓或螺钉时: 右紧，左松。</p></li><li><p>即使在热带地区，夜晚也会比你想象的更冷。带上暖和的行李。</p></li><li><p>跳舞要扭屁股。</p></li><li><p>当你陷入困境时，休息一下。让你的潜意识为你服务。</p></li><li><p>对你的孩子好一点，因为他们会为你选养老院。</p></li></ol><h2 id="好习惯"><a href="#好习惯" class="headerlink" title="好习惯"></a>好习惯</h2><ol><li>每天写下一件你感激的事情是有史以来最便宜的治疗方法。</li><li>别按下“再睡一会”。那只是训练你睡过头。</li><li>通过改变自己的行为来改变自己的思维方式，比通过改变自己的思维方式来改变自己的行为要容易得多。把你想要的改变付诸行动。</li><li>如果你想着只吃3口，你就有可能吃掉任何甜点。</li></ol><h2 id="投资建议"><a href="#投资建议" class="headerlink" title="投资建议"></a>投资建议</h2><ol><li>生活中所有最大的收获(财富、人际关系或知识)都来自复利的魔力,放大微小的稳定收益。你所需要的就是不断地增加1% 而不是定期减少1% 。</li><li>除了挥撒激情之外，所有事情都要节俭。</li></ol><h2 id="待人之道"><a href="#待人之道" class="headerlink" title="待人之道"></a>待人之道</h2><ol><li>真诚的道歉不会强调借口。单纯的赞美不会附带要求。</li><li>让所有的门都保持原样。</li><li>不要以让其他人喜欢你为目标，而是要让他们敬佩你。</li><li>成熟的基础: 这不是你的错，并不意味着它不是你的责任。</li><li>在别人背后给予他们赞美。赞美也会回到你身边。</li><li>持续的愤怒会让你变得愚蠢。</li><li>对自己要严格，对他人要宽容。反之，对每个人来说都是地狱。</li><li>对侮辱的最佳回应是“你可能是对的”。因为事实往往如此。</li><li>如果你能避免寻求别人的认可，你的力量就是无限的。</li><li>当孩子没完没了地问“为什么?”,最聪明的回答是: “我不知道，你对这事怎么看?”</li><li>平静是会传染的。</li><li>即使是一个愚蠢的人，在大多数事情上也可能是正确的。传统智慧大多数是正确的。</li><li>思考别人的弱点很容易; 思考自己的弱点很难，但回报要高得多。</li><li>如果你借了什么东西，试着把它以比你收到的更好的形状归还。清洗，磨利，填满它。</li><li>让人群安静下来，或者让醉汉安静下来，只需要轻声说话。</li><li>不要像对待坏人那样对待他们。像对待自己那样对待他们。</li><li>如果你每次交际的时候，都给对方带去一份祝福; 以后，当你给他们带去问题时，他们也会乐于帮你。</li><li>别说废话。</li><li>如果你遇到了一个混蛋，请忽视他。如果你每天到处遇到混蛋，请自省。</li><li>你可以通过发现某人相信愚蠢观念原因，来减少烦扰。</li><li>三人行必有我师。</li><li>总是给予赞扬，承担责任。</li><li>人们记不住演讲里超过3点的内容。</li></ol><h2 id="诈骗克星"><a href="#诈骗克星" class="headerlink" title="诈骗克星"></a>诈骗克星</h2><ol><li>如果有人试图说服你，这不是传销。但这就是传销。</li><li>不管是谁想知道你的账户信息，首先假设是诈骗，除非证明他们是清白的。证实的方法是给他们回电话，或者在官方网站登录你的账户，不要实用他们提供的网站登录(防止钓鱼诈骗)。当他们通过电话、短信或电子邮件与你联系时，不要泄露任何身份信息。你得掌控 对话。</li><li>孩子们完全乐于接受甚至渴望家庭规则。“我们家有个原则”是父母制定家庭策略的唯一借口。“我有个原则”是你设定自我保护策略的唯一借口。</li></ol><h2 id="避免受伤"><a href="#避免受伤" class="headerlink" title="避免受伤"></a>避免受伤</h2><ol><li>永远不要把刀朝向自己。</li><li>所有枪都上膛了。</li></ol><h2 id="家庭生活"><a href="#家庭生活" class="headerlink" title="家庭生活"></a>家庭生活</h2><ol><li>你不是和一个人结婚，而是和一个家庭结婚。</li><li>某些事情不需要完美就能变得美妙。尤其是婚礼。</li></ol><h2 id="禅"><a href="#禅" class="headerlink" title="禅"></a>禅</h2><ol><li>当有人告诉你有些事情不对劲时，他们通常是对的。当有人告诉你如何解决这个问题时，他们通常是错误的。</li><li>如果你认为自己看到了一只老鼠，那么你确实看到了。如果有一只老鼠，那么肯定还有更多。</li><li>从你的日程表可以看出你做事的优先级，从你交往的朋友能判断你将去到哪里。</li><li>为了发现你生命中的礼物是什么，你被赋予了生命的礼物。当你弄清楚你的任务是什么的时候，你就会完成你的任务。这不是一个悖论。事件的过程就是这样。</li><li>我们不是暂时拥有灵魂的肉体。我们是暂时拥有肉体的灵魂。</li><li>我敬佩的人，他们读过的书都比我多。</li><li>实践是最好的老师。</li><li>有限的游戏是为了赢或输。为了让游戏继续下去，我们玩了无限的游戏。寻找无限的游戏，因为它们会带来无限的回报。</li><li>一个可以用钱解决的问题并不是真正的问题。</li><li>不经风雨，怎见彩虹。</li><li>做个好祖先。做一些下一代会感谢你的事情。一件简单的事情就是种一棵树。</li><li>这样的建议不是法律。它们就像帽子。如果一顶不合适，试试另一顶。</li></ol><h2 id="无法归类"><a href="#无法归类" class="headerlink" title="无法归类"></a>无法归类</h2><ol><li>创造艺术的不是神。只有不完美的人才能创造艺术，因为艺术始于破碎的东西</li><li>阳台或门廊必须至少有6英尺(2米)宽，否则不能使用。</li><li>历史上最大的罪恶总是由那些真正相信自己在与邪恶作斗争的人犯下的。谨防与邪恶作斗争。</li><li>玩大富翁游戏时，花光你所有的钱去购买、交换或交易 Orange 的房产。不要为公用事业操心。</li></ol><hr><p><img src="/.top//svg+xml;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAzNiAzNiI+PHBhdGggZmlsbD0iI0VGOTY0NSIgZD0iTTMyLjMwMiAyNC4zNDdjLS42OTUtMS4wMS0uMzA3LTIuNDctLjQ4LTQuMDgyLS4xNzgtMi42My0xLjMwOC01LjE3OC0zLjUtNy4yMTZsLTcuNDY2LTYuOTQycy0xLjQ3MS0xLjM2OS0yLjg0MS4xMDNjLTEuMzY4IDEuNDcxLjEwNCAyLjg0LjEwNCAyLjg0bDMuMTU0IDIuOTM0IDIuNzM0IDIuNTQycy0uNjg1LjczNi0zLjcxMS0yLjA3OGwtMTAuMjItOS41MDZzLTEuNDczLTEuMzY4LTIuODQyLjEwNGMtMS4zNjggMS40NzEuMTAzIDIuODQuMTAzIDIuODRsOS42NjQgOC45ODljLS4wMjEtLjAyLS43MzEuNjkyLS43NDQuNjhMNS45MTcgNS45MzhzLTEuNDcyLTEuMzY5LTIuODQxLjEwM2MtMS4zNjkgMS40NzIuMTAzIDIuODQuMTAzIDIuODRMMTMuNTIgMTguNWMuMDEyLjAxMi0uNjU0Ljc2NC0uNjM0Ljc4M2wtOC45Mi04LjI5OHMtMS40NzItMS4zNjktMi44NDEuMTAzYy0xLjM2OSAxLjQ3Mi4xMDMgMi44NDEuMTAzIDIuODQxbDkuNDg0IDguODJjLjA4Ny4wODEtLjUuOTA4LS4zOTEgMS4wMDlsLTYuODM0LTYuMzU2cy0xLjQ3Mi0xLjM2OS0yLjg0MS4xMDRjLTEuMzY5IDEuNDcyLjEwMyAyLjg0MS4xMDMgMi44NDFMMTEuODk2IDMwLjcxYzEuODYxIDEuNzMxIDMuNzcyIDIuNjA3IDYuMDc2IDIuOTI4LjQ2OS4wNjUgMS4wNjkuMDY1IDEuMzE1LjA5Ni43NzcuMDk4IDEuNDU5LjM3NCAyLjM3Mi45MzQgMS4xNzUuNzIgMi45MzggMS4wMiAzLjk1MS0uMDYzbDMuNDU0LTMuNjk1IDMuMTg5LTMuNDEyYzEuMDEyLTEuMDgyLjgzMS0yLjAxNi4wNDktMy4xNTF6Ii8+PHBhdGggZD0iTTEuOTU2IDM1LjAyNmMtLjI1NiAwLS41MTItLjA5OC0uNzA3LS4yOTMtLjM5MS0uMzkxLS4zOTEtMS4wMjMgMC0xLjQxNEw0LjggMjkuNzdjLjM5MS0uMzkxIDEuMDIzLS4zOTEgMS40MTQgMHMuMzkxIDEuMDIzIDAgMS40MTRsLTMuNTUxIDMuNTVjLS4xOTUuMTk1LS40NTEuMjkyLS43MDcuMjkyem02Ljc0Ni45MjJjLS4xMDkgMC0uMjIxLS4wMTgtLjMzMS0uMDU2LS41MjEtLjE4Mi0uNzk2LS43NTItLjYxMy0xLjI3NGwuOTcxLTIuNzczYy4xODItLjUyMS43NTMtLjc5NSAxLjI3NC0uNjE0LjUyMS4xODMuNzk2Ljc1My42MTMgMS4yNzRsLS45NzEgMi43NzNjLS4xNDQuNDEyLS41My42Ny0uOTQzLjY3em0tNy42NjctNy42NjdjLS40MTIgMC0uNzk4LS4yNTctLjk0My0uNjY3LS4xODQtLjUyMS4wODktMS4wOTIuNjEtMS4yNzZsMi40OTUtLjg4MWMuNTIzLS4xOCAxLjA5Mi4wOTEgMS4yNzYuNjEuMTg0LjUyMS0uMDg5IDEuMDkyLS42MSAxLjI3NmwtMi40OTUuODgxYy0uMTExLjAzOS0uMjIzLjA1Ny0uMzMzLjA1N3ptMjkuNDYtMjEuNzY3Yy0uMjU2IDAtLjUxMi0uMDk4LS43MDctLjI5My0uMzkxLS4zOTEtLjM5MS0xLjAyNCAwLTEuNDE1bDMuNTUyLTMuNTVjLjM5MS0uMzkgMS4wMjMtLjM5IDEuNDE0IDBzLjM5MSAxLjAyNCAwIDEuNDE1bC0zLjU1MiAzLjU1Yy0uMTk1LjE5Ni0uNDUxLjI5My0uNzA3LjI5M3ptLTQuMTY0LTEuNjk3Yy0uMTA5IDAtLjIyMS0uMDE5LS4zMy0uMDU3LS41MjEtLjE4Mi0uNzk2LS43NTItLjYxNC0xLjI3NGwuOTctMi43NzNjLjE4My0uNTIxLjc1Mi0uNzk2IDEuMjc0LS42MTQuNTIxLjE4Mi43OTYuNzUyLjYxNCAxLjI3NGwtLjk3IDIuNzczYy0uMTQ0LjQxMy0uNTMxLjY3MS0uOTQ0LjY3MXptNi4xNDMgNS43NzRjLS40MTIgMC0uNzk4LS4yNTctLjk0My0uNjY3LS4xODQtLjUyMS4wOS0xLjA5Mi42MS0xLjI3NmwyLjQ5NC0uODgxYy41MjItLjE4NSAxLjA5Mi4wOSAxLjI3Ni42MS4xODQuNTIxLS4wOSAxLjA5Mi0uNjEgMS4yNzZsLTIuNDk0Ljg4MWMtLjExMS4wMzktLjIyMy4wNTctLjMzMy4wNTd6IiBmaWxsPSIjRkE3NDNFIi8+PHBhdGggZmlsbD0iI0ZGREI1RSIgZD0iTTM1LjM5IDIzLjgyMmMtLjY2MS0xLjAzMi0uMjI0LTIuNDc5LS4zNDItNC4wOTYtLjA5LTIuNjM0LTEuMTMzLTUuMjE5LTMuMjU1LTcuMzNsLTcuMjI4LTcuMTg5cy0xLjQyNC0xLjQxNy0yLjg0My4wMDhjLTEuNDE3IDEuNDI0LjAwOCAyLjg0Mi4wMDggMi44NDJsMy4wNTQgMy4wMzkgMi42NDYgMi42MzJzLS43MS43MTItMy42MzktMi4yMDJjLTIuOTMxLTIuOTE1LTkuODk0LTkuODQ1LTkuODk0LTkuODQ1cy0xLjQyNS0xLjQxNy0yLjg0My4wMDhjLTEuNDE4IDEuNDI0LjAwNyAyLjg0MS4wMDcgMi44NDFsOS4zNTYgOS4zMWMtLjAyLS4wMi0uNzU0LjY2Ny0uNzY3LjY1NEw5LjY0IDQuNTM0cy0xLjQyNS0xLjQxOC0yLjg0My4wMDdjLTEuNDE3IDEuNDI1LjAwNyAyLjg0Mi4wMDcgMi44NDJsMTAuMDExIDkuOTYyYy4wMTIuMDEyLS42OC43NDEtLjY2Ljc2MUw3LjUyIDkuNTEzcy0xLjQyNS0xLjQxNy0yLjg0My4wMDguMDA3IDIuODQzLjAwNyAyLjg0M2w5LjE4MSA5LjEzNWMuMDg0LjA4My0uNTMuODkxLS40MjUuOTk2bC02LjYxNi02LjU4M3MtMS40MjUtMS40MTctMi44NDMuMDA4LjAwNyAyLjg0My4wMDcgMi44NDNsMTAuNzkgMTAuNzMyYzEuODAyIDEuNzkzIDMuNjgyIDIuNzMyIDUuOTc0IDMuMTMxLjQ2Ny4wODEgMS4wNjcuMTAxIDEuMzExLjE0Ljc3My4xMjQgMS40NDUuNDIzIDIuMzQgMS4wMTQgMS4xNS43NTkgMi45MDIgMS4xMTggMy45NTEuMDdsMy41NzctMy41NzYgMy4zMDItMy4zMDJjMS4wNDktMS4wNS45LTEuOTkuMTU3LTMuMTV6Ii8+PC9zdmc+" alt="👏">哇，你读完了。</p><p>揭开最开始玩的梗，<strong>人工，智能</strong>：有多少人工，就有多少智能。全是我手动归类╮(╯▽╰)╭</p><p>如果你喜欢这些建议，可以把它们分享给你的好朋友，智慧翻倍。</p><hr><h2 id="我对这些建议的看法"><a href="#我对这些建议的看法" class="headerlink" title="我对这些建议的看法"></a>我对这些建议的看法</h2><p>我把它们归类为需要解读的毒鸡汤。这些语录，可能有那么点用吧，有些句子还挺幽默。</p><p>要说没用吧，好像也不太对。学点拧螺丝技巧的也还不错，有些观点我在《人性的弱点》里也读到过。作者在他的经验里，认为这些思考方式对他来说很棒，就搜集下来了。</p><p>但你能直接把它们作为可信的人生经验吗？不行。我认为，如果为它们加上适用范围，那才是很棒的人生经验。</p><p>比如：你能像他一样，为这些建议赋予自己的理解。作者的经验就能跃然纸上。</p><details open style="box-sizing: inherit; display: block; max-width: var(--responsive--aligndefault-width); border: 1px solid rgb(170, 170, 170); border-radius: 4px; padding: 0.5em; margin-bottom: var(--global--spacing-vertical); margin-top: var(--global--spacing-vertical); margin-left: auto; margin-right: auto;"><summary style="box-sizing: inherit; display: list-item; max-width: var(--global--spacing-measure); font-weight: 700; margin: -0.5em -0.5em 0.5em; padding: 0.5em; border-bottom: 1px solid rgb(170, 170, 170);">小时候，让你与其它同学格格不入的东西，长大后会帮助你成功，如果你不失去它的话。</summary><p style="box-sizing: inherit; padding: 0px; margin: 0px; -webkit-font-smoothing: antialiased; line-height: var(--wp--typography--line-height,var(--global--line-height-body)); max-width: var(--global--spacing-measure); overflow-wrap: break-word; font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, &quot;Microsoft YaHei New&quot;, &quot;STHeiti Light&quot;, sans-serif;">That thing that made you weird as a kid could make you great as an adult — if you don’t lose it.</p><hr style="box-sizing: content-box; height: 0px; overflow: visible; padding: 0px; margin: 0px auto; -webkit-font-smoothing: antialiased; border-top-style: none; border-right-style: none; border-left-style: none; border-bottom: var(--separator--height) solid var(--separator--border-color); clear: both; max-width: none;"><p style="box-sizing: inherit; padding: 0px; margin: 0px; -webkit-font-smoothing: antialiased; line-height: var(--wp--typography--line-height,var(--global--line-height-body)); max-width: var(--global--spacing-measure); overflow-wrap: break-word; font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, &quot;Microsoft YaHei New&quot;, &quot;STHeiti Light&quot;, sans-serif;">注释：<br style="box-sizing: inherit; max-width: var(--global--spacing-measure);">这句话是说，一个人能够成功，不是因为你跟别人一样，而是因为你从小就跟别人不一样，并且保持了下来。这就是鼓励大家走不一样的路，别人告诉你做人要怎样怎样，听听就好。<br style="box-sizing: inherit; max-width: var(--global--spacing-measure);">——阮一峰<br style="box-sizing: inherit; max-width: var(--global--spacing-measure);"></p></details><hr><p>作者；Go123</p><p><strong>如果你对哪一段话有自己的感悟，可以在留言区分享你的经验，与大家一起交流。</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>图床测试</title>
    <link href="/2021/05/08/%E6%B5%8B%E8%AF%95/"/>
    <url>/2021/05/08/%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p><img src="https://upimage.alexhchu.com/2021/05/08/23f287396f511.jpg" alt="bxskmjsf9ut61"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>First Article《被讨厌的勇气》</title>
    <link href="/2021/05/07/First-Article/"/>
    <url>/2021/05/07/First-Article/</url>
    
    <content type="html"><![CDATA[<p><img src="https://upimage.alexhchu.com/2021/05/08/2d488f282aa4e.png" alt="avatar"></p><p>最近刚读的一本，岸见一郎和古贺史健 写的《被讨厌的勇气》。只看书名我就被击到了。 这么多年，我一直体会着不被欢迎–自己困惑的这样怪圈里，我总是不明白明明自己待人和善热心助人，但是似乎没办法跟谁深交，似乎总是被讨厌被落单，因为害怕落单，渐渐 的不再参与聚会这些活动，甚至开始有点社恐，我有多害怕被讨厌，这本书带给我的冲击力就有多大。 我现在依然还是不受欢迎，但是我懂得了别人对待我的态度是别人的课题，是别人的选择，我无法决定和改变，我能做的只有接受这些无法改变的事实，改变自己能改变的，现在内心平静了很多，往后的日子还是需要慢慢修炼。我现在把这本书的语录做成了练字帖，每天练字的时候提醒自己，修炼自己。 如果跟我有一样困惑的朋友，也许可以试试看这本书。                                                                                                                                                           </p><p> 来自 adatecher</p><p>PS；学校图书馆检索系统失效，没借到这本书 , 需要的发邮件给我  <a href="mailto:&#x69;&#x73;&#122;&#104;&#x61;&#110;&#103;&#x7a;&#104;&#105;&#64;&#x6f;&#117;&#116;&#x6c;&#111;&#111;&#x6b;&#46;&#99;&#111;&#x6d;">&#x69;&#x73;&#122;&#104;&#x61;&#110;&#103;&#x7a;&#104;&#105;&#64;&#x6f;&#117;&#116;&#x6c;&#111;&#111;&#x6b;&#46;&#99;&#111;&#x6d;</a></p><p>​        </p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
